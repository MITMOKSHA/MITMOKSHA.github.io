<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Moksha&#39;s Blog</title>
  
  
  <link href="https://mitmoksha.github.io/atom.xml" rel="self"/>
  
  <link href="https://mitmoksha.github.io/"/>
  <updated>2022-05-18T01:10:34.964Z</updated>
  <id>https://mitmoksha.github.io/</id>
  
  <author>
    <name>Pishun Huang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSAPP Ch.1</title>
    <link href="https://mitmoksha.github.io/2022/05/17/csapp%20ch1/"/>
    <id>https://mitmoksha.github.io/2022/05/17/csapp%20ch1/</id>
    <published>2022-05-17T15:14:00.000Z</published>
    <updated>2022-05-18T01:10:34.964Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;计算机系统漫游&quot;&gt;&lt;strong&gt;计算机系统漫游&lt;/strong&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;计算机系统是由&lt;strong&gt;硬件&lt;/strong&gt;和&lt;strong&gt;系统软件&lt;/strong&gt;组成的&lt;/li&gt;
&lt;li&gt;源程序中由&lt;code&gt;ASCII&lt;/code&gt;字符构成的文件称为&lt;strong&gt;文本文件&lt;/strong&gt;, 所有其他文都称为&lt;strong&gt;二进制文件&lt;/strong&gt; &lt;img src=&quot;../../themes/next/source/images/img-2022-05-17-23-21-05.png&quot;&gt;&lt;/li&gt;
&lt;li&gt;预处理阶段预处理器根据以字符&lt;code&gt;#&lt;/code&gt;开头的命令，修改原始C程序，读取系统头文件的内容，并把它直接插入程序文本中，如： &lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#if 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;字(word)&lt;/code&gt;: 总线传送定长字节块的大小&lt;/li&gt;
&lt;li&gt;磁盘驱动器(HDD)简单说其实就是磁盘&lt;/li&gt;
&lt;li&gt;适配器: 插在主板插槽的卡(比如图形适配器，显示屏); 控制器：I/O设备本身或系统主板上的芯片组 &lt;img src=&quot;../../themes/next/source/images/img-2022-05-17-23-29-59.png&quot;&gt;&lt;/li&gt;
&lt;li&gt;在键盘上读取&lt;code&gt;hello&lt;/code&gt;命令。通过将数据读取到&lt;code&gt;KBDR&lt;/code&gt;中(中间涉及到ASCII到Binary的转换)，再将&lt;code&gt;KBDR&lt;/code&gt;中的数据存入主存中。整个过程需要CPU参与，引出了概念&lt;code&gt;可编程I/O&lt;/code&gt; &lt;img src=&quot;../../themes/next/source/images/img-2022-05-17-23-34-32.png&quot;&gt;&lt;/li&gt;
&lt;li&gt;因此也延伸出了优化的方案(使用&lt;code&gt;DMA&lt;/code&gt;) &lt;img src=&quot;../../themes/next/source/images/img-2022-05-17-23-35-01.png&quot;&gt;&lt;/li&gt;
&lt;li&gt;将字符串显示到显示器上。通过将数据写入到&lt;code&gt;DDR&lt;/code&gt;中(要将Binary转换为ASCII)，再将&lt;code&gt;DDR&lt;/code&gt;中的数据显示到图形适配器上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cache&lt;/code&gt;产生的原因：随着时间的推移&lt;code&gt;DRAM&lt;/code&gt;的性能和&lt;code&gt;Disk&lt;/code&gt;相差三个数量级; Cache充分利用了&lt;strong&gt;局部性原理&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Posix标准&lt;/code&gt;：标准化&lt;code&gt;Unix&lt;/code&gt;的开发&lt;/li&gt;
&lt;li&gt;&lt;code&gt;上下文切换&lt;/code&gt;涉及到&lt;code&gt;PC&lt;/code&gt;和&lt;code&gt;寄存器组&lt;/code&gt;的Save和Restore &lt;img src=&quot;../../themes/next/source/images/img-2022-05-17-23-40-48.png&quot; alt=&quot;存储器层次结构&quot;&gt; &lt;img src=&quot;../../themes/next/source/images/img-2022-05-17-23-44-21.png&quot; alt=&quot;进程虚拟地址空间&quot;&gt;&lt;/li&gt;
&lt;li&gt;进程虚拟内存中的内容存储在磁盘上，而主存作为磁盘的缓存, 造成&lt;code&gt;容量又大速度又快&lt;/code&gt;的假象。&lt;/li&gt;
&lt;li&gt;Unix I/O的读写系统调用为&lt;code&gt;逻辑读写&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;通过&lt;code&gt;网络适配器&lt;/code&gt;可以在不同主机之间在交换主存中的数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Amdahl&#39;s law&lt;/code&gt;: &lt;span class=&quot;math inline&quot;&gt;\(S=\frac{1}{(1-\alpha)+\alpha/k}\)&lt;/span&gt;, 其中&lt;span class=&quot;math inline&quot;&gt;\(S\)&lt;/span&gt;为加速比, &lt;span class=&quot;math inline&quot;&gt;\(\alpha\)&lt;/span&gt;为所需执行时间占总时间的比例, &lt;span class=&quot;math inline&quot;&gt;\(k\)&lt;/span&gt;为该部分性能提升的比例&lt;/li&gt;
&lt;/ul&gt;
</summary>
    
    
    
    <category term="CSAPP Reading" scheme="https://mitmoksha.github.io/categories/CSAPP-Reading/"/>
    
    
  </entry>
  
  <entry>
    <title>NJU OS Note</title>
    <link href="https://mitmoksha.github.io/2022/05/16/NJU-OS-Note/"/>
    <id>https://mitmoksha.github.io/2022/05/16/NJU-OS-Note/</id>
    <published>2022-05-16T10:14:19.000Z</published>
    <updated>2022-05-16T10:14:58.495Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;nju-os-note&quot;&gt;NJU OS Note&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ld&lt;/code&gt;, GNU Linker&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gcc&lt;/code&gt;支持对汇编代码的预编译(还会定义__ASSEMBLER__宏)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wget url&lt;/code&gt;下载URL的文件内容。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gcc -E foo.c&lt;/code&gt;在预处理阶段后停止。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;volatile&lt;/code&gt;声明的变量不能优化。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;asm&lt;/code&gt;是&lt;code&gt;GNU&lt;/code&gt;的拓展。可以从汇编程序中读取和写入C变量。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html&quot;&gt;&lt;code&gt;Extended asm&lt;/code&gt;&lt;/a&gt;: &lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;asm asm-qualifiers ( AssemblerTemplate  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               :OutputOperands  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               [:InputOperands[: Clobbers]]) &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Qualifier: volatile, inline, goto。&lt;/li&gt;
&lt;li&gt;AssemblerTemplate: 包含汇编程序指令的文字字符串。&lt;/li&gt;
&lt;li&gt;OutputOperands(允许使用空列表): &lt;code&gt;[[asmSymbolicName]] constraint(c_variablename)&lt;/code&gt;，输出约束必须以&lt;code&gt;=&lt;/code&gt;作为开头, 常见的约束&lt;code&gt;r&lt;/code&gt; for register, &lt;code&gt;m&lt;/code&gt; for memory。约束后还需要有个C的变量名，括号是语法的必须部分。&lt;/li&gt;
&lt;li&gt;InputOperands(允许使用空列表)。&lt;/li&gt;
&lt;li&gt;eample &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; src = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; dst;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;asm&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&amp;quot;mov %1, %0\n\t&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;add $1, %0&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    : &lt;span class=&quot;string&quot;&gt;&amp;quot;=r&amp;quot;&lt;/span&gt; (dst) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    : &lt;span class=&quot;string&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt; (src));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;Clobbers: &lt;code&gt;memory&lt;/code&gt;( Further, the compiler does not assume that any values read from memory before an asm remain unchanged after that asm;), &lt;code&gt;Compiler barrier&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strace&lt;/code&gt;追踪当前程序或者进程执行过的系统调用。&lt;/li&gt;
&lt;/ul&gt;
</summary>
    
    
    
    <category term="Computer Science Notes" scheme="https://mitmoksha.github.io/categories/Computer-Science-Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>ICS Lab Note</title>
    <link href="https://mitmoksha.github.io/2022/05/16/ICS-Lab-Note/"/>
    <id>https://mitmoksha.github.io/2022/05/16/ICS-Lab-Note/</id>
    <published>2022-05-16T10:08:09.000Z</published>
    <updated>2022-05-16T10:25:44.336Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;ics-lab-note&quot;&gt;ICS Lab Note&lt;/h1&gt;
&lt;h2 id=&quot;lab1&quot;&gt;&lt;strong&gt;lab1&lt;/strong&gt;&lt;/h2&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;实际上通过编写发现，为了编写方便，我将ASCII模板0和存放文件起始地址的位置调换(即0x3013和0x3012)，并将文件的内容连续(consecutively)放在从0x3013处的开始；随之变动的也有将LDR R3, x3013改为LEA R3, x3013，最开始没有注意到这个问题debug发现其实x3013里我设的值为&#39;H&#39;即x0048，按照原来的执行，它会提取x0048处的内容，因此单步执行到这行机器代码直接halt掉了，且估计是因为ACV异常导致的结果。&lt;/li&gt;
&lt;li&gt;编写bin文件转化为obj之后调试发现，bin文件第一行的内容并没有被显示在主存中。因此可以推断第一行为程序执行的起始地址(可能是因为我没有仔细看实验手册吧:)。&lt;/li&gt;
&lt;li&gt;fgets执行成功文件指针自动后移; 格式化写入文件fprintf;&lt;/li&gt;
&lt;li&gt;a+: 以追加、可读写的方式打开文件，允许读写。若进行读操作，则从头开始读；若进行写操作，则将内容添加在末尾。若文件不存在，则创建文件。打开成功后返回文件指针，位置指针指向文件头部。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;完成时间3h&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;lab2&quot;&gt;&lt;strong&gt;lab2&lt;/strong&gt;&lt;/h2&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;Bug: Loop的次数不是所期望的3，因此需要改变影响loop次数的BR，将BRzp改为BRp，即可达到所期望的3次，结果为30.&lt;/li&gt;
&lt;li&gt;Bug: 应该把LDR改为LEA这样就可以提取存储单元的内容，而不是提取存储单元内容的内容(相当于间接寻址)，修改过后就为正确的了。&lt;/li&gt;
&lt;li&gt;Bug: x300C和x300B行应该调换位置。因为实际上R3寄存器的设置是作为loop的次数，同时LDR同样也可以生成条件码，这会导致意想不到的错误(比如对应文件地址里存储的是负数或者0就会终止循环得到意想不到的结果)&lt;/li&gt;
&lt;li&gt;Bug: 如果x3400地址单元内存的值为0，那么就会出现死循环的问题，单步调试之后发现在x3003处的BR指令并没有判断取数为0的情况，因此我做出了这样的调整。在x3003处将BRn改为BRnz&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;完成时间2h&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;lab3&quot;&gt;&lt;strong&gt;lab3&lt;/strong&gt;&lt;/h2&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;将输入的 大写/小写字母 转化为 小写/大写字母 输出到显示屏上，如果是别的字符则输出error. &lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;       .ORIG  x3000           ; program start at x3000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       LD     R2, TERM        ; Load negative of ASCII 7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AGAIN  TRAP   x23             ; input syscall&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;; judge the range of R0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       LD     R5, UPMIN       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       ADD    R5, R5, R0     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       BRn    OTH             ; if input &amp;lt; A, jump to OTH&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       LD     R5, UPMAX      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       ADD    R5, R5, R0      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       BRnz   U2L             ; if input &amp;lt;= Z, jump to U2L&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       LD     R5, LOWMIN      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       ADD    R5, R5, R0      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       BRn    OTH             ; if input &amp;lt; a, jump to OTH&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       LD     R5, LOWMAX      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       ADD    R5, R5, R0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       BRnz   L2U             ; if input &amp;lt;= z, jump to L2U&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       BR     OTH             ; the rest range of input.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;U2L    LD     R3, ASCII       ; load difference value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       BR     OUTPUT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;L2U    LD     R3, ASCII2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;; handle alpha&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OUTPUT ADD    R1, R2, R0      ; if input 7, jump to halt.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       BRz    EXIT            ; exit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       ADD    R0, R0, R3      ; trasforming u2l/l2u&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       TRAP   x21             ; output syscall&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       BR     AGAIN           ; unconditional loop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;; if the character not an alpha, handle from there&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OTH    ADD    R1, R2, R0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       BRz    EXIT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       LEA    R3, ERROR       ; load prompt pointer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LOOP   LDR    R0, R3, #0      ; load character&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       BRz    AGAIN&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       TRAP   x21             ; it may change the value in R1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       ADD    R3, R3, #1      ; load next character&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       BR     LOOP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TERM   .FILL  xFFC9           ; xFFC9 is negative of ASCII 7(x0037)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ASCII  .FILL  x0020           ; The difference value between upper case and lower case&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ASCII2 .FILL  xFFE0           ; xFFE0 is negative of -20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UPMIN  .FILL  xFFBF           ; xFFBF is negative of ASCII A&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UPMAX  .FILL  xFFA6           ; xFFA6 is negative of ASCII Z&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LOWMIN .FILL  xFF9F           ; xFF9F is negative of ASCII a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LOWMAX .FILL  xFF86           ; xFF86 is negative of ASCII z&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;EXIT   TRAP   x25             ; halt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ERROR  .STRINGZ &amp;quot;Input character error!&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       .END&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;gets函不包含换行符(&lt;code&gt;\n&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;完成时间2h&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Computer Science Notes" scheme="https://mitmoksha.github.io/categories/Computer-Science-Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>CS186 Note</title>
    <link href="https://mitmoksha.github.io/2022/05/16/CS186-Note/"/>
    <id>https://mitmoksha.github.io/2022/05/16/CS186-Note/</id>
    <published>2022-05-16T10:07:44.000Z</published>
    <updated>2022-05-16T10:12:44.740Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;cs186-note&quot;&gt;&lt;strong&gt;CS186 Note&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&quot;sql&quot;&gt;&lt;strong&gt;SQL&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT&lt;/code&gt;后加&lt;code&gt;DISTINCT&lt;/code&gt;可以将重复的tuple去掉。 &lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DISTINCT&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;columns&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;tbl&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;null-value&quot;&gt;NULL value&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;任何以&lt;code&gt;NULL&lt;/code&gt;值作为操作数的算数运算操作结果都为&lt;code&gt;NULL&lt;/code&gt;，所以通常需要&lt;code&gt;IS NULL&lt;/code&gt;或&lt;code&gt;IS NOT NULL&lt;/code&gt;来提前判断。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NULL&lt;/code&gt; is &lt;strong&gt;falsey&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;aggregate-funtion&quot;&gt;Aggregate funtion&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SUM, AVG, MAX, MIN, COUNT。&lt;/li&gt;
&lt;li&gt;输入是一个列，输出是一个值。&lt;/li&gt;
&lt;li&gt;每个aggregate都忽略掉&lt;code&gt;NULL&lt;/code&gt;, 除了&lt;code&gt;COUNT(*)&lt;/code&gt;之外。注意&lt;code&gt;COUNT&amp;lt;column&amp;gt;&lt;/code&gt;返回具体列非空值的数量。&lt;/li&gt;
&lt;li&gt;注意分组后COUNT(*)计算的是当前组的行数。 &lt;img src=&quot;https://pic4.zhimg.com/80/v2-e51e235585811be04b61e04c12a2d1e0.png&quot; alt=&quot;Image&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;groups-of-data&quot;&gt;Groups of Data&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GROUP BY&lt;/li&gt;
&lt;li&gt;将当前列中属性值相同的行放入一个组中, 该组中的所有行要合并为一行。 &lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;columns&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;tbl&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;predicate&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; −− &lt;span class=&quot;keyword&quot;&gt;Filter&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;rows&lt;/span&gt; (before &lt;span class=&quot;keyword&quot;&gt;grouping&lt;/span&gt;) .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;columns&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;HAVING&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;predicate&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt;; −− &lt;span class=&quot;keyword&quot;&gt;Filter&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;groups&lt;/span&gt; (after &lt;span class=&quot;keyword&quot;&gt;grouping&lt;/span&gt;) .&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;WHERE用于过滤行，而HAVING用来过滤组。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;有问题的查询语句&quot;&gt;有问题的查询语句&lt;/h3&gt;</summary>
    
    
    
    <category term="Computer Science Notes" scheme="https://mitmoksha.github.io/categories/Computer-Science-Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>CMU 15-445 Project1: BUFFER POOL MANAGER</title>
    <link href="https://mitmoksha.github.io/2022/05/16/cmu15445-project1/"/>
    <id>https://mitmoksha.github.io/2022/05/16/cmu15445-project1/</id>
    <published>2022-05-16T10:02:20.000Z</published>
    <updated>2022-05-16T10:26:04.134Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;cmu-15-445-project1-buffer-pool-manager&quot;&gt;CMU 15-445 Project1: BUFFER POOL MANAGER&lt;/h1&gt;
&lt;h2 id=&quot;task-1---lru-replacement-policy&quot;&gt;&lt;strong&gt;TASK #1 - LRU REPLACEMENT POLICY&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;问题描述&quot;&gt;&lt;strong&gt;1.1 问题描述&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;需要完成的函数 - Victim(frame_id_t*) : Remove the object that was accessed least recently compared to all the other elements being tracked by the Replacer, store its contents in the output parameter and return True. If the Replacer is empty return False. - Pin(frame_id_t) : This method should be called after a page is pinned to a frame in the BufferPoolManager. It should remove the frame containing the pinned page from the LRUReplacer. - Unpin(frame_id_t) : This method should be called when the pin_count of a page becomes 0. This method should add the frame containing the unpinned page to the LRUReplacer. - Size() : This method returns the number of frames that are currently in the LRUReplacer&lt;/p&gt;
&lt;p&gt;想到lc上有类似的实现可以参考一下，双链表+哈希表实现&lt;a href=&quot;https://leetcode-cn.com/problems/lru-cache/&quot;&gt;LRU&lt;/a&gt;，大致思路和本题是一样的。pin时表示该页正在被使用，因此需要将该页从lru_replacer中移除，unpin反之。需要注意的是，不能多次unpin，这点与lc上有差别。&lt;/p&gt;
&lt;h3 id=&quot;部分实现&quot;&gt;&lt;strong&gt;1.2 部分实现&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;lru_replacer.h&lt;/strong&gt; &lt;/p&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// TODO(student): implement me!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; std::unordered_map&amp;lt;&lt;span class=&quot;type&quot;&gt;frame_id_t&lt;/span&gt;, ListNode*&amp;gt; cache_;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; std::mutex lru_latch_;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ListNode* head_;  &lt;span class=&quot;comment&quot;&gt;// dummy.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ListNode* tail_;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;type&quot;&gt;size_t&lt;/span&gt; curr_size_;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;type&quot;&gt;size_t&lt;/span&gt; capacity_;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; &lt;strong&gt;lru_replacer.cpp&lt;/strong&gt; &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LRUReplacer::Victim&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;frame_id_t&lt;/span&gt; *frame_id)&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;span class=&quot;comment&quot;&gt;// evict the old frame.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;std::lock_guard&amp;lt;std::mutex&amp;gt; &lt;span class=&quot;title&quot;&gt;guard&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(lru_latch_)&lt;/span&gt;&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;// lock&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (curr_size_ == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;  &lt;span class=&quot;comment&quot;&gt;// lruReplacer empty.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    frame_id = &lt;span class=&quot;literal&quot;&gt;nullptr&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ListNode* delframe = tail_-&amp;gt;prev;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;frame_id_t&lt;/span&gt; delframe_id= delframe-&amp;gt;frame_id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  *frame_id = delframe_id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  cache_.&lt;span class=&quot;built_in&quot;&gt;erase&lt;/span&gt;(delframe_id);  &lt;span class=&quot;comment&quot;&gt;// remove from frame.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  curr_size_--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Evict frame.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;RemoveFrame&lt;/span&gt;(delframe);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; delframe;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LRUReplacer::Pin&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;frame_id_t&lt;/span&gt; frame_id)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;std::lock_guard&amp;lt;std::mutex&amp;gt; &lt;span class=&quot;title&quot;&gt;guard&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(lru_latch_)&lt;/span&gt;&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;// lock&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (cache_.&lt;span class=&quot;built_in&quot;&gt;find&lt;/span&gt;(frame_id) != cache_.&lt;span class=&quot;built_in&quot;&gt;end&lt;/span&gt;()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// decrease the attribute size.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    curr_size_--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ListNode* delframe = cache_[frame_id];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cache_.&lt;span class=&quot;built_in&quot;&gt;erase&lt;/span&gt;(frame_id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;RemoveFrame&lt;/span&gt;(delframe);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// release the source.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; delframe;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LRUReplacer::Unpin&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;frame_id_t&lt;/span&gt; frame_id)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;std::lock_guard&amp;lt;std::mutex&amp;gt; &lt;span class=&quot;title&quot;&gt;guard&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(lru_latch_)&lt;/span&gt;&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;// lock&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (cache_.&lt;span class=&quot;built_in&quot;&gt;find&lt;/span&gt;(frame_id) == cache_.&lt;span class=&quot;built_in&quot;&gt;end&lt;/span&gt;()) &amp;#123;  &lt;span class=&quot;comment&quot;&gt;// didn&amp;#x27;t find Unpin frame.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ListNode* frame = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;ListNode&lt;/span&gt;(frame_id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ++curr_size_;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (curr_size_ &amp;gt; capacity_) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;type&quot;&gt;frame_id_t&lt;/span&gt; fid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;Victim&lt;/span&gt;(&amp;amp;fid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      cache_[frame_id] = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      curr_size_--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;AddToHead&lt;/span&gt;(frame);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      cache_[frame_id] = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;AddToHead&lt;/span&gt;(frame);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// couldn&amp;#x27;t Unpin many times but once.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LRUReplacer::Size&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; curr_size_; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LRUReplacer::AddToHead&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ListNode* frame)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  frame-&amp;gt;next = head_-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  head_-&amp;gt;next-&amp;gt;prev = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  head_-&amp;gt;next = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  frame-&amp;gt;prev = head_;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LRUReplacer::RemoveFrame&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ListNode* frame)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  frame-&amp;gt;prev-&amp;gt;next = frame-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  frame-&amp;gt;next-&amp;gt;prev = frame-&amp;gt;prev;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="CMU15-445" scheme="https://mitmoksha.github.io/categories/CMU15-445/"/>
    
    
  </entry>
  
  <entry>
    <title>CS61C Lab2</title>
    <link href="https://mitmoksha.github.io/2022/05/16/cs61c-lab2/"/>
    <id>https://mitmoksha.github.io/2022/05/16/cs61c-lab2/</id>
    <published>2022-05-16T09:59:00.000Z</published>
    <updated>2022-05-16T10:00:29.556Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;cs61c-lab2&quot;&gt;CS61C Lab2&lt;/h1&gt;
&lt;h2 id=&quot;exercise-0-makefiles&quot;&gt;&lt;strong&gt;Exercise 0: Makefiles&lt;/strong&gt;&lt;/h2&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;Which target is part of a rule that deletes all the compiled programs?&lt;/li&gt;
&lt;li&gt;Which target is part of a rule that makes all the compiled programs?&lt;/li&gt;
&lt;li&gt;Which compiler is currently being used?&lt;/li&gt;
&lt;li&gt;What C standard are we currently using?&lt;/li&gt;
&lt;li&gt;How would we reference a variable FOO in a makefile?&lt;/li&gt;
&lt;li&gt;What operating system does the term “Darwin” represent?&lt;/li&gt;
&lt;li&gt;What line creates the lfsr program from its object files? (Give its line number.)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我的答案: &lt;/p&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1.clean&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.all&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.gcc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.c99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5.$(Foo)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6.macos&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7.31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ## &lt;strong&gt;Exercise 1: Bit Operations&lt;/strong&gt; &lt;code&gt;get_bit&lt;/code&gt;很简单，&lt;code&gt;set_bit&lt;/code&gt;中需要将&lt;code&gt;v&lt;/code&gt;的&lt;code&gt;0&lt;/code&gt;</summary>
    
    
    
    <category term="CS61C" scheme="https://mitmoksha.github.io/categories/CS61C/"/>
    
    
  </entry>
  
  <entry>
    <title>Stanford CS144 Lab0: Networking Warmup</title>
    <link href="https://mitmoksha.github.io/2022/05/16/cs144-lab0/"/>
    <id>https://mitmoksha.github.io/2022/05/16/cs144-lab0/</id>
    <published>2022-05-16T09:58:51.000Z</published>
    <updated>2022-05-16T10:06:07.874Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;stanford-cs144-lab0-networking-warmup&quot;&gt;Stanford CS144 Lab0: Networking Warmup&lt;/h1&gt;
&lt;h2 id=&quot;fetch-a-web-page&quot;&gt;&lt;strong&gt;1. Fetch a Web page&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;telnet&lt;/code&gt;通过&lt;code&gt;http&lt;/code&gt;协议访问远端服务器 &lt;img src=&quot;https://pic4.zhimg.com/80/v2-0f3f73376b27537497d7778b962aa839.png&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;writing-webget&quot;&gt;&lt;strong&gt;2. Writing webget&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;描述&quot;&gt;&lt;strong&gt;2.1 描述&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;实现&lt;code&gt;webget&lt;/code&gt;来通过Internet获取网页，使用TCP协议和套接字抽象。实现简单的Web客户端，使用上述&lt;code&gt;HTTP&lt;/code&gt;的形式。读数据时遇到&lt;code&gt;EOF&lt;/code&gt;则结束，使用轮询的方式读取数据。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Please note that in HTTP, each line must be ended with “” (it’s not sufficient to use just “” or endl). • Don’t forget to include the “Connection: close” line in your client’s request. This tells the server that it shouldn’t wait around for your client to send any more requests after this one. Instead, the server will send one reply and then will immediately end its outgoing bytestream (the one from the server’s socket to your socket). You’ll discover that your incoming byte stream has ended because your socket will reach “EOF” (end of file) when you have read the entire byte stream coming from the server. That’s how your client will know that the server has finished its reply. • Make sure to read and print all the output from the server until the socket reaches “EOF” (end of file)—a single call to read is not enough. • We expect you’ll need to write about ten lines of code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;实现&quot;&gt;&lt;strong&gt;2.2 实现&lt;/strong&gt;&lt;/h3&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;get_URL&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; string &amp;amp;host, &lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; string &amp;amp;path)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Your code here.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// You will need to connect to the &amp;quot;http&amp;quot; service on&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// the computer whose name is in the &amp;quot;host&amp;quot; string,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// then request the URL path given in the &amp;quot;path&amp;quot; string.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Then you&amp;#x27;ll need to print out everything the server sends back,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// (not just one call to read() -- everything) until you reach&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// the &amp;quot;eof&amp;quot; (end of file).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// cerr &amp;lt;&amp;lt; &amp;quot;Function called: get_URL(&amp;quot; &amp;lt;&amp;lt; host &amp;lt;&amp;lt; &amp;quot;, &amp;quot; &amp;lt;&amp;lt; path &amp;lt;&amp;lt; &amp;quot;).\n&amp;quot;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// cerr &amp;lt;&amp;lt; &amp;quot;Warning: get_URL() has not been implemented yet.\n&amp;quot;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TCPSocket client;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    client.&lt;span class=&quot;built_in&quot;&gt;connect&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;Address&lt;/span&gt;(host, &lt;span class=&quot;string&quot;&gt;&amp;quot;http&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    string message = &lt;span class=&quot;string&quot;&gt;&amp;quot;GET &amp;quot;&lt;/span&gt; + path + &lt;span class=&quot;string&quot;&gt;&amp;quot; HTTP/1.1\r\nHost: &amp;quot;&lt;/span&gt; + &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    host + &lt;span class=&quot;string&quot;&gt;&amp;quot; \r\nConnection: close\r\n\r\n&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    client.&lt;span class=&quot;built_in&quot;&gt;write&lt;/span&gt;(message);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    client.&lt;span class=&quot;built_in&quot;&gt;shutdown&lt;/span&gt;(SHUT_WR);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (!client.&lt;span class=&quot;built_in&quot;&gt;eof&lt;/span&gt;()) &amp;#123;  &lt;span class=&quot;comment&quot;&gt;// polling&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cout &amp;lt;&amp;lt; client.&lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    client.&lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;an-in-memory-reliable-byte-stream&quot;&gt;&lt;strong&gt;3. An in-memory reliable byte stream&lt;/strong&gt;&lt;/h2&gt;</summary>
    
    
    
    <category term="CS144" scheme="https://mitmoksha.github.io/categories/CS144/"/>
    
    
  </entry>
  
  <entry>
    <title>MIT 6.S081 Lab5: xv6 lazy page allocation</title>
    <link href="https://mitmoksha.github.io/2022/05/16/s081-lab5/"/>
    <id>https://mitmoksha.github.io/2022/05/16/s081-lab5/</id>
    <published>2022-05-16T09:55:02.000Z</published>
    <updated>2022-05-16T10:05:51.223Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;mit-6.s081-lab5-xv6-lazy-page-allocation&quot;&gt;MIT 6.S081 Lab5: xv6 lazy page allocation&lt;/h1&gt;
&lt;p&gt;很多方法都用到了Lazy allocation, 比如: - paging from disk - COW fork - automatically extending stack - memory-mapped files&lt;/p&gt;
&lt;p&gt;xv6使用&lt;code&gt;sbrk()&lt;/code&gt;申请&lt;strong&gt;物理地址空间&lt;/strong&gt;并将其映射到进程的虚拟地址空间(向内核请求堆内存)。这个lab视频上也给了很多提示，重要的是理解并掌握原理。&lt;/p&gt;
&lt;p&gt;实际上复杂的内核会在分配栈空间时做这样的处理, &lt;code&gt;sbrk&lt;/code&gt;没有分配物理地址空间，只是记住分配了哪些用户地址，并在用户地址将这些地址标记为无效(invalid)。当进程尝试第一次使用任何给定Lazy Allocation的页面时，CPU会产生Page Fault的异常，该异常错误的类型会存放到&lt;code&gt;scause&lt;/code&gt;寄存器，而&lt;code&gt;stval&lt;/code&gt;寄存器中从存放着不能被translate的虚拟地址。 &lt;img src=&quot;https://pic4.zhimg.com/80/v2-998ad453d6ec0eed41edd98ca61aa644.png&quot; alt=&quot;scause&quot;&gt;&lt;/p&gt;
&lt;p&gt;Page Fault的类型: - load page faults, load指令不能translate地址 - store page faults，store指令不能translate地址 - instruction page faults，指令地址未能被tanslate ## &lt;strong&gt;1. Eliminate allocation from sbrk()&lt;/strong&gt; ### &lt;strong&gt;1.1 Description&lt;/strong&gt; 将&lt;code&gt;growproc&lt;/code&gt;函数注释掉，不分配物理地址空间，只增加进程内存的大小。 ### &lt;strong&gt;1.2 Implementation&lt;/strong&gt; &lt;code&gt;kernel/sysproc.c&lt;/code&gt; &lt;/p&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;uint64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_&quot;&gt;sys_sbrk&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; addr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(argint(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &amp;amp;n) &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  addr = myproc()-&amp;gt;sz;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  myproc()-&amp;gt;sz += n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// if(growproc(n) &amp;lt; 0)  // Not need to allocate pysical memory.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//   return -1;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; addr;  &lt;span class=&quot;comment&quot;&gt;// return the old size of process&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ## &lt;strong&gt;2. Lazy allocation&lt;/strong&gt; ### &lt;strong&gt;2.1 Description&lt;/strong&gt; 比如说要实现&lt;code&gt;Lazy allocation&lt;/code&gt;, 在&lt;code&gt;sbrk()&lt;/code&gt;</summary>
    
    
    
    <category term="MIT 6.S081" scheme="https://mitmoksha.github.io/categories/MIT-6-S081/"/>
    
    
  </entry>
  
  <entry>
    <title>MIT 6.S081 Lab4: Traps</title>
    <link href="https://mitmoksha.github.io/2022/05/16/s081-lab4/"/>
    <id>https://mitmoksha.github.io/2022/05/16/s081-lab4/</id>
    <published>2022-05-16T09:54:57.000Z</published>
    <updated>2022-05-16T10:05:43.818Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;mit-6.s081-lab4-traps&quot;&gt;MIT 6.S081 Lab4: Traps&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;跟着视频走一遍系统调用&lt;code&gt;gdb&lt;/code&gt;的流程。&lt;code&gt;tmux&lt;/code&gt;分割两个窗口，一个窗口作为服务器&lt;code&gt;make CPUS=1 qemu-gdb&lt;/code&gt;，另一个窗口作为&lt;code&gt;gdb&lt;/code&gt;调试窗口&lt;code&gt;gdb-multiarch&lt;/code&gt;。将断点打在&lt;code&gt;ecall指令处&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt;执行，随后再将第二个断点打到&lt;code&gt;print/x $stvec&lt;/code&gt;处也就是，&lt;code&gt;TRAPFRAME&lt;/code&gt;的起始地址。&lt;code&gt;ecall&lt;/code&gt;指令完成三件事，将用户模式切换到管理员模式、将PC保存到sepc寄存器中、将stvec寄存器的值赋给PC跳转到stvec保存的地址处执行。&lt;/li&gt;
&lt;li&gt;进入&lt;code&gt;trampoline.s&lt;/code&gt;后，&lt;code&gt;csrrw a0, sscratch, a0&lt;/code&gt;首先将非体系结构寄存器&lt;code&gt;sscratch&lt;/code&gt;与&lt;code&gt;a0&lt;/code&gt;的值交换，&lt;code&gt;sscratch&lt;/code&gt;寄存器中保存的时&lt;code&gt;TRAPFRAME&lt;/code&gt;的起始地址。&lt;/li&gt;
&lt;li&gt;然后将当前的现场(即寄存器)保存到&lt;code&gt;TRAPFRAME&lt;/code&gt;中，再将&lt;code&gt;TRAPFRAME&lt;/code&gt;中保存的内核栈指针，&lt;code&gt;hartid&lt;/code&gt;，&lt;code&gt;usertrap()&lt;/code&gt;的地址，以及内核页表所在的&lt;code&gt;stap&lt;/code&gt;寄存器的值加载到当前通用寄存器中。&lt;/li&gt;
&lt;li&gt;随后将寄存器&lt;code&gt;t1&lt;/code&gt;保存的内核页目录的地址写入当前&lt;code&gt;satp&lt;/code&gt;寄存器中，再刷新&lt;code&gt;TLB&lt;/code&gt;，将用户页表切换为内核页表 &lt;figure class=&quot;highlight mips&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;csrw satp, &lt;span class=&quot;built_in&quot;&gt;t1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sfence.vma &lt;span class=&quot;built_in&quot;&gt;zero&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;zero&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;将用户模式完全切换为内核模式之后，最后跳到&lt;code&gt;t0&lt;/code&gt;中保存的&lt;code&gt;usertrap()&lt;/code&gt;的入口地址，&lt;code&gt;jr t0&lt;/code&gt;跳入&lt;code&gt;usertrap&lt;/code&gt;函数。&lt;/li&gt;
&lt;li&gt;进入函数后，首先判断&lt;code&gt;sstatus&lt;/code&gt;寄存器的&lt;code&gt;SSP&lt;/code&gt;位是否为&lt;code&gt;0&lt;/code&gt;(即是否为用户模式下发生的trap)。将&lt;code&gt;stvec&lt;/code&gt;赋值为&lt;code&gt;kernelvec&lt;/code&gt;的入口地址，即在当前&lt;code&gt;usertrap&lt;/code&gt;发生的中断或异常则跳转到&lt;code&gt;stvec&lt;/code&gt;处执行。再保存中断返回的地址到&lt;code&gt;sepc&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;中断将会改变&lt;code&gt;sstatus&lt;/code&gt;寄存器，因此在修改结束之后才将中断打开&lt;code&gt;intr_on()&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;之后进入系统调用&lt;code&gt;syscall()&lt;/code&gt;，根据&lt;code&gt;p-&amp;gt;trapframe-&amp;gt;a7&lt;/code&gt;中保存的系统调用号来决定调用哪个系统调用(专门通过一个静态数组查找&lt;code&gt;syscalls[num]&lt;/code&gt;), 随后将系统调用的返回值保存到&lt;code&gt;p-&amp;gt;trapframe-&amp;gt;a0&lt;/code&gt;中。&lt;/li&gt;
&lt;li&gt;完成系统调用之后，随后计算&lt;code&gt;uservec&lt;/code&gt;的虚拟地址并赋值给&lt;code&gt;stvec&lt;/code&gt;，以便发生异常或中断的时候处理。接下来将相应的内容restore到&lt;code&gt;trapframe&lt;/code&gt;中方便进行下一次&lt;code&gt;trap&lt;/code&gt;。随后更新&lt;code&gt;sstatus&lt;/code&gt;状态寄存器的值，清空&lt;code&gt;SSP&lt;/code&gt;、设置&lt;code&gt;SPIE&lt;/code&gt;位。&lt;/li&gt;
&lt;li&gt;更新&lt;code&gt;sepc&lt;/code&gt;的值以及将&lt;code&gt;satp&lt;/code&gt;的值设为内核页表的地址，将在&lt;code&gt;userret&lt;/code&gt;中切换页表。计算&lt;code&gt;userret&lt;/code&gt;在&lt;code&gt;trampoline.s&lt;/code&gt;中的虚拟地址，跳转到&lt;code&gt;userret&lt;/code&gt;，跳转之前传参有个小细节，即将&lt;code&gt;TRAMPOLINE&lt;/code&gt;作为第一个参数，这样在&lt;code&gt;a0&lt;/code&gt;与&lt;code&gt;sscratch&lt;/code&gt;交换后，&lt;code&gt;sscratch&lt;/code&gt;就得到&lt;code&gt;TRAMPOLINE&lt;/code&gt;的起始地址了。&lt;/li&gt;
&lt;li&gt;进入到收尾阶段，将恢复到&lt;code&gt;trap&lt;/code&gt;之前的状态。将&lt;code&gt;TRAMPOLINE&lt;/code&gt;中的内容load到通用寄存器中，先将&lt;code&gt;a0&lt;/code&gt;寄存器的值写入&lt;code&gt;sscratch&lt;/code&gt;寄存器中，这样最后&lt;code&gt;csrrw a0, sscratch, a0&lt;/code&gt;即可将这两个寄存器复位为各自的值。最后&lt;code&gt;sret&lt;/code&gt;将&lt;code&gt;sepc&lt;/code&gt;赋给&lt;code&gt;pc&lt;/code&gt;完成系统调用恢复正常执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;比较重要的非体系结构寄存器&quot;&gt;&lt;strong&gt;比较重要的非体系结构寄存器&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;stvec, 存放系统调用处理程序的地址&lt;/li&gt;
&lt;li&gt;sepc, 当系统调用发生时PC存放到此处，以便系统调用返回时能从下一条指令开始执行&lt;code&gt;sret&lt;/code&gt;: sepc -&amp;gt; pc。&lt;/li&gt;
&lt;li&gt;scause, ISA通过它来分析系统调用的种类&lt;/li&gt;
&lt;li&gt;sscratch, 内核将一个值放到这里，方便系统调用的开始(通用寄存器和sscratch寄存器通过csrrw来交换值&lt;code&gt;csrrw a0, sscratch, a0&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;sstatus, 状态寄存器，类似LC-3来决定是否发生中断，或者决定是用户模式还是系统模式，若存在条件码则存放条件码。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;debug相关&quot;&gt;&lt;strong&gt;Debug相关&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;add-symbol-file&lt;/code&gt;或&lt;code&gt;file&lt;/code&gt;命令从文件&lt;code&gt;filename&lt;/code&gt;中读取附加的符号表信息存放在&lt;code&gt;ELF&lt;/code&gt;文件(可重定向目标文件)中的&lt;code&gt;.symtab&lt;/code&gt; Entry中。当文件名（通过其他方式）动态加载到正在运行的程序中时，将使用此命令。&lt;/li&gt;
&lt;li&gt;解决调试alarmtest时&lt;code&gt;usertrap&lt;/code&gt; C源代码不显示的, 函数和变量信息不够全，需要&lt;code&gt;add-symbol-file kernel/kernel&lt;/code&gt;即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;risc-v-assembly&quot;&gt;&lt;strong&gt;1. RISC-V assembly&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;description&quot;&gt;&lt;strong&gt;1.1 Description&lt;/strong&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;It will be important to understand a bit of RISC-V assembly, which you were exposed to in 6.004. There is a file user/call.c in your xv6 repo. make fs.img compiles it and also produces a readable assembly version of the program in user/call.asm.&lt;/p&gt;
&lt;p&gt;可以在&lt;code&gt;gdb&lt;/code&gt;中使用&lt;code&gt;file&lt;/code&gt;来对&lt;code&gt;call.o&lt;/code&gt;文件调试，并将断点打到&lt;code&gt;main&lt;/code&gt;函数上。解释调试时&lt;code&gt;RISCV&lt;/code&gt;汇编出现的一些指令, &lt;code&gt;x&lt;/code&gt;表示寄存器, &lt;code&gt;M&lt;/code&gt;表示存储器: - &lt;code&gt;auipc&lt;/code&gt;, Add Upper Immediate to PC. 将指令编码格式中的&lt;code&gt;Imm[31:12]&lt;/code&gt;左移12位后的结果&lt;code&gt;sign-extened&lt;/code&gt;后再加上PC。 &lt;/p&gt;&lt;figure class=&quot;highlight mips&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;auipc rd, Imm  &lt;span class=&quot;comment&quot;&gt;; x[rd] = PC + sext(Imm[31:12] &amp;lt;&amp;lt; 12)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; - &lt;code&gt;li&lt;/code&gt;(pseudoinstruction), Load Immediate. &lt;figure class=&quot;highlight mips&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;li rd, Imm  &lt;span class=&quot;comment&quot;&gt;; x[rd] = Imm&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; - &lt;code&gt;mv&lt;/code&gt;(pseudoinstruction), Move. 注意与&lt;code&gt;x86 ISA&lt;/code&gt;的&lt;code&gt;mov&lt;/code&gt;传递方向不同。 &lt;figure class=&quot;highlight mips&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mv rd, rs1  &lt;span class=&quot;comment&quot;&gt;; x[rd] = x[rs1]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; - &lt;code&gt;jalr&lt;/code&gt;, Jump And Link Register. &lt;a href=&quot;https://stackoverflow.com/questions/40453719/risc-v-why-set-least-significant-bit-to-zero-in-jalr&quot;&gt;为什么要将最低有效位置为0?&lt;/a&gt;字节对齐。将当前pc+4赋给ra作为返回地址并跳转到offset(rs1), 随后返回到当前指令的下一条指令继续执行。注意如果rd省略了，那么rd就默认为x1(即&lt;code&gt;ra&lt;/code&gt;保存返回地址的寄存器)。 &lt;figure class=&quot;highlight mips&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;jalr &lt;/span&gt;rd, offset(rs1)  &lt;span class=&quot;comment&quot;&gt;; t=pc+4; pc=(x[rs1]+sext(offset)) &amp;amp; ~1; x[rd] = t;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; - &lt;code&gt;lbu&lt;/code&gt;, Load Byte Unsigned. 取完一个字节后，紧接着零拓展, &lt;code&gt;lb&lt;/code&gt;为符号位拓展。 &lt;figure class=&quot;highlight mips&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;lbu &lt;/span&gt;rd, offset(rs1)  &lt;span class=&quot;comment&quot;&gt;; x[rd] M[x[rs1] + sext(offset)] [7:0]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; - &lt;code&gt;seqz&lt;/code&gt;(pseudoinstruction), Set if Equal to Zero. &lt;figure class=&quot;highlight mips&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;seqz rd, rs1  &lt;span class=&quot;comment&quot;&gt;; x[rd] = (x[rs1] == 0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; - &lt;code&gt;csrrw&lt;/code&gt;, Control and Status Register Read and Write. 状态寄存器和通用寄存器之间的读写操作。将状态寄存器中的内容放入rd寄存器，将rs1的内容放入状态寄存器。 &lt;figure class=&quot;highlight mips&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;csrrw rd, csr, rs1  &lt;span class=&quot;comment&quot;&gt;; t = CSRs[csr]; CSRs[csr] = x[rs1]; x[rd] = t&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; - &lt;code&gt;csrw&lt;/code&gt; &lt;figure class=&quot;highlight mips&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;csrw csr, rs1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; - &lt;code&gt;csrr&lt;/code&gt; &lt;figure class=&quot;highlight mips&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;csrr rd, csr&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ### &lt;strong&gt;1.2 Implementation&lt;/strong&gt; - 不了解RISCV指令集的建议可以把&lt;a href=&quot;https://inst.eecs.berkeley.edu/~cs61c/su20/&quot;&gt;CS61C&lt;/a&gt;的Week2专门讲RISCV的slide或者视频看完，直到把调试过程中遇到的每条指令弄明白再来做这一个task。&lt;p&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;分析&lt;code&gt;user/call.asm&lt;/code&gt; &lt;/p&gt;</summary>
    
    
    
    <category term="MIT 6.S081" scheme="https://mitmoksha.github.io/categories/MIT-6-S081/"/>
    
    
  </entry>
  
  <entry>
    <title>MIT 6.S081 Lab3: Page tables</title>
    <link href="https://mitmoksha.github.io/2022/05/16/s081-lab3/"/>
    <id>https://mitmoksha.github.io/2022/05/16/s081-lab3/</id>
    <published>2022-05-16T09:54:53.000Z</published>
    <updated>2022-05-16T10:05:35.837Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;mit-6.s081-lab3-page-tables&quot;&gt;MIT 6.S081 Lab3: Page tables&lt;/h1&gt;
&lt;h2 id=&quot;print-a-page-table&quot;&gt;&lt;strong&gt;1. Print a page table&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;description&quot;&gt;&lt;strong&gt;1.1 Description&lt;/strong&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Define a function called vmprint(). It should take a pagetable_t argument, and print that pagetable in the format described below. Insert if(p-&amp;gt;pid==1) vmprint(p-&amp;gt;pagetable) in exec.c just before the return argc, to print the first process&#39;s page table. You receive full credit for this assignment if you pass the pte printout test of make grade.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;implementation&quot;&gt;&lt;strong&gt;1.2 Implementation&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;将&lt;code&gt;vmprint&lt;/code&gt;函数添加到&lt;code&gt;kernel/vm.c&lt;/code&gt;文件中并在&lt;code&gt;kernel/defs.h&lt;/code&gt;文件中添加该函数的声明。使用格式符&lt;code&gt;%p&lt;/code&gt;打印16进制数，使用&lt;code&gt;kernel/riscv.h&lt;/code&gt;文件中定义的宏, 参考&lt;code&gt;freewalk&lt;/code&gt;函数以递归的形式完成。实现该函数方便接下来的调试, 可以在gdb中测试其正确性。 &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;vmprint&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;pagetable_t&lt;/span&gt; pagetable, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; depth)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (depth == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;page table %p\n&amp;quot;&lt;/span&gt;, pagetable);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (depth == &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;// terminate condition.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;512&lt;/span&gt;; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;pte_t&lt;/span&gt; pte = pagetable[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pte &amp;amp; PTE_V) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      uint64 pa = PTE2PA(pte);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; depth; ++j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;.. &amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;..%d: pte %p pa %p\n&amp;quot;&lt;/span&gt;, i, pte, pa);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      vmprint((&lt;span class=&quot;type&quot;&gt;pagetable_t&lt;/span&gt;)pa, ++depth);  &lt;span class=&quot;comment&quot;&gt;// recursive.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      pagetable[i] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;a-kernel-page-table-per-process&quot;&gt;&lt;strong&gt;2. A kernel page table per process&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;description-1&quot;&gt;&lt;strong&gt;2.1 Description&lt;/strong&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Your first job is to modify the kernel so that every process uses its own copy of the kernel page table when executing in the kernel. Modify struct proc to maintain a kernel page table for each process, and modify the scheduler to switch kernel page tables when switching processes. For this step, each per-process kernel page table should be identical to the existing global kernel page table. You pass this part of the lab if usertests runs correctly. - Add a field to struct proc for the process&#39;s kernel page table. - A reasonable way to produce a kernel page table for a new process is to implement a modified version of kvminit that makes a new page table instead of modifying kernel_pagetable. You&#39;ll want to call this function from allocproc. - Make sure that each process&#39;s kernel page table has a mapping for that process&#39;s kernel stack. In unmodified xv6, all the kernel stacks are set up in procinit. You will need to move some or all of this functionality to allocproc. - Modify scheduler() to load the process&#39;s kernel page table into the core&#39;s satp register (see kvminithart for inspiration). Don&#39;t forget to call sfence_vma() after calling w_satp(). - scheduler() should use kernel_pagetable when no process is running. - Free a process&#39;s kernel page table in freeproc. - You&#39;ll need a way to free a page table without also freeing the leaf physical memory pages. - vmprint may come in handy to debug page tables. - It&#39;s OK to modify xv6 functions or add new functions; you&#39;ll probably need to do this in at least kernel/vm.c and kernel/proc.c. (But, don&#39;t modify kernel/vmcopyin.c, kernel/stats.c, user/usertests.c, and user/stats.c.) - A missing page table mapping will likely cause the kernel to encounter a page fault. It will print an error that includes sepc=0x00000000XXXXXXXX. You can find out where the fault occurred by searching for XXXXXXXX in kernel/kernel.asm. ### &lt;strong&gt;2.2 Implementation&lt;/strong&gt; - 在&lt;code&gt;proc.h&lt;/code&gt;进程的结构体中加入内核页表的属性&lt;code&gt;pkpagetable&lt;/code&gt;。 &lt;/p&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;proc&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;spinlock&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lock&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// p-&amp;gt;lock must be held when using these:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;procstate&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;state&lt;/span&gt;;&lt;/span&gt;        &lt;span class=&quot;comment&quot;&gt;// Process state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;proc&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;parent&lt;/span&gt;;&lt;/span&gt;         &lt;span class=&quot;comment&quot;&gt;// Parent process&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *chan;                  &lt;span class=&quot;comment&quot;&gt;// If non-zero, sleeping on chan&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; killed;                  &lt;span class=&quot;comment&quot;&gt;// If non-zero, have been killed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; xstate;                  &lt;span class=&quot;comment&quot;&gt;// Exit status to be returned to parent&amp;#x27;s wait&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; pid;                     &lt;span class=&quot;comment&quot;&gt;// Process ID&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// these are private to the process, so p-&amp;gt;lock need not be held.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  uint64 kstack;               &lt;span class=&quot;comment&quot;&gt;// Virtual address of kernel stack&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  uint64 sz;                   &lt;span class=&quot;comment&quot;&gt;// Size of process memory (bytes)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;pagetable_t&lt;/span&gt; pagetable;       &lt;span class=&quot;comment&quot;&gt;// User page table&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;pagetable_t&lt;/span&gt; pkpagetable;     &lt;span class=&quot;comment&quot;&gt;// process&amp;#x27;s kernel page table&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;trapframe&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;trapframe&lt;/span&gt;;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// data page for trampoline.S&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;context&lt;/span&gt;;&lt;/span&gt;      &lt;span class=&quot;comment&quot;&gt;// swtch() here to run process&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;file&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;ofile&lt;/span&gt;[&lt;span class=&quot;title&quot;&gt;NOFILE&lt;/span&gt;];&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// Open files&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;inode&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;cwd&lt;/span&gt;;&lt;/span&gt;           &lt;span class=&quot;comment&quot;&gt;// Current directory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; name[&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;];               &lt;span class=&quot;comment&quot;&gt;// Process name (debugging)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; - 实现&lt;code&gt;kvminit&lt;/code&gt;函数的另一个版本来初始化进程的内核页表。 &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// create processes&amp;#x27;s kernel table&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;pagetable_t&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_&quot;&gt;ukvmcreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;pagetable_t&lt;/span&gt; kpagetable = (&lt;span class=&quot;type&quot;&gt;pagetable_t&lt;/span&gt;) kalloc();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(kpagetable, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, PGSIZE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  uvmmap(kpagetable, UART0, UART0, PGSIZE, PTE_R | PTE_W);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  uvmmap(kpagetable, VIRTIO0, VIRTIO0, PGSIZE, PTE_R | PTE_W);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  uvmmap(kpagetable, CLINT, CLINT, &lt;span class=&quot;number&quot;&gt;0x10000&lt;/span&gt;, PTE_R | PTE_W);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  uvmmap(kpagetable, PLIC, PLIC, &lt;span class=&quot;number&quot;&gt;0x400000&lt;/span&gt;, PTE_R | PTE_W);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  uvmmap(kpagetable, KERNBASE, KERNBASE, (uint64)etext-KERNBASE, PTE_R | PTE_X);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  uvmmap(kpagetable, (uint64)etext, (uint64)etext, PHYSTOP-(uint64)etext, PTE_R | PTE_W);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  uvmmap(kpagetable, TRAMPOLINE, (uint64)trampoline, PGSIZE, PTE_R | PTE_X);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; kpagetable;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; - 以及专门将映射加入进程的内核页表的函数&lt;code&gt;uvmmap&lt;/code&gt;。 &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// add a mapping to processes&amp;#x27;s kernel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// page table&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_&quot;&gt;uvmmap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;pagetable_t&lt;/span&gt; pagetable, uint64 va, uint64 pa, uint64 sz, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; perm)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(mappages(pagetable, va, sz, pa, perm) != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    panic(&lt;span class=&quot;string&quot;&gt;&amp;quot;uvmmap&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;确保每个进程的内核页表中包含该进程所使用到的内核栈的映射。可以将原来在&lt;code&gt;boot time&lt;/code&gt;进程初始化&lt;code&gt;procinit&lt;/code&gt;函数中全局内核页表映射内核栈的代码&lt;strong&gt;注释&lt;/strong&gt;掉。应题目要求在&lt;code&gt;allocproc&lt;/code&gt;函数中实现映射当前进程所对应的内核栈。 &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Allocate a page for the process&amp;#x27;s kernel stack.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Map it high in memory, followed by an invalid&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// guard page.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *pa = kalloc();   &lt;span class=&quot;comment&quot;&gt;// allocate physical memory per page.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(pa == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  panic(&lt;span class=&quot;string&quot;&gt;&amp;quot;kalloc&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uint64 va = KSTACK((&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;) (p - proc));  &lt;span class=&quot;comment&quot;&gt;// virtual address.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// make sure each process&amp;#x27;s kernel page table has a mapping&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// for that process&amp;#x27;s kernel stack.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uvmmap(p-&amp;gt;pkpagetable, va, (uint64)pa, PGSIZE, PTE_R | PTE_W);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p-&amp;gt;kstack = va;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;scheduler&lt;/code&gt;函数内实现，模仿&lt;code&gt;kvminithart&lt;/code&gt;函数在调度时切换页表，即将进程的内核页表的地址放入&lt;code&gt;satp&lt;/code&gt;寄存器，相应地刷新&lt;code&gt;TLB&lt;/code&gt;，当进程没有在运行时，调度器切换回全局内核页表。 &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Per-CPU process scheduler.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Each CPU calls scheduler() after setting itself up.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Scheduler never returns.  It loops, doing:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  - choose a process to run.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  - swtch to start running that process.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  - eventually that process transfers control&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    via swtch back to the scheduler.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_&quot;&gt;scheduler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;proc&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cpu&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;c&lt;/span&gt; =&lt;/span&gt; mycpu();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  c-&amp;gt;proc = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(;;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Avoid deadlock by ensuring that devices can interrupt.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    intr_on();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; found = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(p = proc; p &amp;lt; &amp;amp;proc[NPROC]; p++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      acquire(&amp;amp;p-&amp;gt;lock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(p-&amp;gt;state == RUNNABLE) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Switch to chosen process.  It is the process&amp;#x27;s job&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// to release its lock and then reacquire it&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// before jumping back to us.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        p-&amp;gt;state = RUNNING;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        c-&amp;gt;proc = p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//  load the process&amp;#x27;s kernel page table into the core&amp;#x27;s satp register.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        w_satp(MAKE_SATP(p-&amp;gt;pkpagetable));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sfence_vma();   &lt;span class=&quot;comment&quot;&gt;// flush the TLB.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        swtch(&amp;amp;c-&amp;gt;context, &amp;amp;p-&amp;gt;context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// use kernel_pagetable when no process is running&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        kvminithart();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Process is done running for now.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// It should have changed its p-&amp;gt;state before coming back.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        c-&amp;gt;proc = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        found = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      release(&amp;amp;p-&amp;gt;lock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !defined (LAB_FS)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(found == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      intr_on();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;asm&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;volatile&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;wfi&amp;quot;&lt;/span&gt;)&lt;/span&gt;;   &lt;span class=&quot;comment&quot;&gt;// wait for interrupt.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;freeproc&lt;/code&gt;函数中完成释放进程的内核页表操作, 同时实现函数&lt;code&gt;freeukpagetable&lt;/code&gt;, 在释放页表时不释放掉&lt;code&gt;leaf&lt;/code&gt;。 &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(p-&amp;gt;pkpagetable) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  freeukpagetable(p-&amp;gt;pkpagetable);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_&quot;&gt;freeukpagetable&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;pagetable_t&lt;/span&gt; pagetable)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// there are 2^9 = 512 PTEs in a page table.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;512&lt;/span&gt;; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;pte_t&lt;/span&gt; pte = pagetable[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pte &amp;amp; PTE_V) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      pagetable[i] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((pte &amp;amp; (PTE_R|PTE_W|PTE_X)) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;  &lt;span class=&quot;comment&quot;&gt;// not leaf.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// this PTE points to a lower-level page table.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        uint64 child = PTE2PA(pte);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        freeukpagetable((&lt;span class=&quot;type&quot;&gt;pagetable_t&lt;/span&gt;)child);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  kfree((&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;*)pagetable);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ## &lt;strong&gt;3. Simplify&lt;/strong&gt; ### &lt;strong&gt;3.1 Description&lt;/strong&gt; &amp;gt; Your job in this part of the lab is to add user mappings to each process&#39;s kernel page table (created in the previous section) that allow copyin (and the related string function copyinstr) to directly dereference user pointers. Replace the body of copyin in kernel/vm.c with a call to copyin_new (defined in kernel/vmcopyin.c); do the same for copyinstr and copyinstr_new. Add mappings for user addresses to each process&#39;s kernel page table so that copyin_new and copyinstr_new work. You pass this assignment if usertests runs correctly and all the make grade tests pass.&lt;/li&gt;
&lt;li&gt;Replace copyin() with a call to copyin_new first, and make it work, before moving on to copyinstr.&lt;/li&gt;
&lt;li&gt;At each point where the kernel changes a process&#39;s user mappings, change the process&#39;s kernel page table in the same way. Such points include fork(), exec(), and sbrk().&lt;/li&gt;
&lt;li&gt;Don&#39;t forget that to include the first process&#39;s user page table in its kernel page table in userinit.&lt;/li&gt;
&lt;li&gt;What permissions do the PTEs for user addresses need in a process&#39;s kernel page table? (A page with PTE_U set cannot be accessed in kernel mode.) Don&#39;t forget about the above-mentioned PLIC limit. ### &lt;strong&gt;3.2 Implementation&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;copy_new&lt;/code&gt;函数替代&lt;code&gt;copyin&lt;/code&gt; &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Copy from user to kernel.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Copy len bytes to dst from virtual address srcva in a given page table.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Return 0 on success, -1 on error.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_&quot;&gt;copyin&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;pagetable_t&lt;/span&gt; pagetable, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *dst, uint64 srcva, uint64 len)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; copyin_new(pagetable, dst, srcva, len);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;copyinstr_new&lt;/code&gt;函数替代&lt;code&gt;copyinstr&lt;/code&gt; &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Copy a null-terminated string from user to kernel.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Copy bytes to dst from virtual address srcva in a given page table,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// until a &amp;#x27;\0&amp;#x27;, or max.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Return 0 on success, -1 on error.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_&quot;&gt;copyinstr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;pagetable_t&lt;/span&gt; pagetable, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *dst, uint64 srcva, uint64 max)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; copyinstr_new(pagetable, dst, srcva, max);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;fork()&lt;/code&gt;中针对用户页表映射修改，相应进程的内核页表做出的改动。并实现将用户页表copy到内核页表并清空相应&lt;code&gt;PTE_U&lt;/code&gt;标志的函数&lt;code&gt;copyupttokpt&lt;/code&gt;。 &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i, pid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;proc&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;np&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;proc&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt; =&lt;/span&gt; myproc();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Allocate process.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((np = allocproc()) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Copy user memory from parent to child.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(uvmcopy(p-&amp;gt;pagetable, np-&amp;gt;pagetable, p-&amp;gt;sz) &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  freeproc(np);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  release(&amp;amp;np-&amp;gt;lock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;np-&amp;gt;sz = p-&amp;gt;sz;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;np-&amp;gt;parent = p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;copyupttokpt(np-&amp;gt;pkpagetable, np-&amp;gt;pagetable, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, np-&amp;gt;sz);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// copy saved user registers.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*(np-&amp;gt;trapframe) = *(p-&amp;gt;trapframe);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Cause fork to return 0 in the child.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;np-&amp;gt;trapframe-&amp;gt;a0 = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_&quot;&gt;copyupttokpt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;pagetable_t&lt;/span&gt; ker, &lt;span class=&quot;type&quot;&gt;pagetable_t&lt;/span&gt; user, uint64 old_size, uint64 new_size)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;pte_t&lt;/span&gt; *pte_from, *pte_to;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  uint64 pa, i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  uint flags;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  old_size = PGROUNDUP(old_size);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i = old_size; i &amp;lt; new_size; i += PGSIZE)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((pte_from = walk(user, i, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      panic(&lt;span class=&quot;string&quot;&gt;&amp;quot;copyupttokpt: walk&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((pte_to = walk(ker, i, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      panic(&lt;span class=&quot;string&quot;&gt;&amp;quot;copyupttokpt: walk&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pa = PTE2PA(*pte_from);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// clear PTE_U bit because of kernel page table.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    flags = PTE_FLAGS(*pte_from) &amp;amp; (~PTE_U);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *pte_to = PA2PTE(pa) | flags;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;函数&lt;code&gt;exec()&lt;/code&gt;中，替换当前进程的用户页表时，内核页表也随之释放，并&lt;code&gt;copy&lt;/code&gt;新用户页表的内容。 &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Save program name for debugging.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(last=s=path; *s; s++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(*s == &lt;span class=&quot;string&quot;&gt;&amp;#x27;/&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    last = s+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;safestrcpy(p-&amp;gt;name, last, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(p-&amp;gt;name));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Commit to the user image.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;oldpagetable = p-&amp;gt;pagetable;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p-&amp;gt;pagetable = pagetable;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p-&amp;gt;sz = sz;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uvmunmap(p-&amp;gt;pkpagetable, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, PGROUNDUP(oldsz)/PGSIZE, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;copyupttokpt(p-&amp;gt;pkpagetable, p-&amp;gt;pagetable, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, p-&amp;gt;sz);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p-&amp;gt;trapframe-&amp;gt;epc = elf.entry;  &lt;span class=&quot;comment&quot;&gt;// initial program counter = main&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p-&amp;gt;trapframe-&amp;gt;sp = sp; &lt;span class=&quot;comment&quot;&gt;// initial stack pointer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;proc_freepagetable(oldpagetable, oldsz);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;函数&lt;code&gt;sbrk()&lt;/code&gt;，相应的增加和减少内存时变更用户页表，需要同时更新进程的内核页表。需要判断用户分配地址空间的限制。如果增加的内存大于&lt;code&gt;PLIC&lt;/code&gt;则返回&lt;code&gt;-1&lt;/code&gt;。 &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_&quot;&gt;growproc&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  uint sz;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;proc&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt; =&lt;/span&gt; myproc();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sz = p-&amp;gt;sz;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(n &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((sz + n) &amp;gt;= PLIC) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// test overflow.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// mapping the n bytes in process&amp;#x27;s kernel table.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((sz = uvmalloc(p-&amp;gt;pagetable, sz, sz + n)) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    copyupttokpt(p-&amp;gt;pkpagetable, p-&amp;gt;pagetable, sz-n, sz);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(n &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sz = uvmdealloc(p-&amp;gt;pagetable, sz, sz + n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ummaping the n bytes in process&amp;#x27;s kernel table.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    uvmunmap(p-&amp;gt;pkpagetable, PGROUNDUP(sz), (PGROUNDUP(p-&amp;gt;sz) - PGROUNDUP(sz))/PGSIZE, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  p-&amp;gt;sz = sz;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;userinit&lt;/code&gt;，初始化第一个&lt;code&gt;process&lt;/code&gt;时也需要更新进程的内核页表。 &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Set up first user process.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_&quot;&gt;userinit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;proc&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  p = allocproc();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  initproc = p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// allocate one user page and copy init&amp;#x27;s instructions&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// and data into it.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  uvminit(p-&amp;gt;pagetable, initcode, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(initcode));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  p-&amp;gt;sz = PGSIZE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  copyupttokpt(p-&amp;gt;pkpagetable, p-&amp;gt;pagetable, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, PGSIZE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// prepare for the very first &amp;quot;return&amp;quot; from kernel to user.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  p-&amp;gt;trapframe-&amp;gt;epc = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;      &lt;span class=&quot;comment&quot;&gt;// user program counter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  p-&amp;gt;trapframe-&amp;gt;sp = PGSIZE;  &lt;span class=&quot;comment&quot;&gt;// user stack pointer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  safestrcpy(p-&amp;gt;name, &lt;span class=&quot;string&quot;&gt;&amp;quot;initcode&amp;quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(p-&amp;gt;name));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  p-&amp;gt;cwd = namei(&lt;span class=&quot;string&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  p-&amp;gt;state = RUNNABLE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  release(&amp;amp;p-&amp;gt;lock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="MIT 6.S081" scheme="https://mitmoksha.github.io/categories/MIT-6-S081/"/>
    
    
  </entry>
  
  <entry>
    <title>MIT 6.S081 Lab2: System Calls</title>
    <link href="https://mitmoksha.github.io/2022/05/16/s081-lab2/"/>
    <id>https://mitmoksha.github.io/2022/05/16/s081-lab2/</id>
    <published>2022-05-16T09:54:49.000Z</published>
    <updated>2022-05-16T10:05:15.308Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;mit-6.s081-lab2-system-calls&quot;&gt;MIT 6.S081 Lab2: System Calls&lt;/h1&gt;
&lt;h2 id=&quot;system-call-tracing&quot;&gt;&lt;strong&gt;1. System call tracing&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;描述&quot;&gt;&lt;strong&gt;1.1 描述&lt;/strong&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;In this assignment you will add a system call tracing feature that may help you when debugging later labs. You&#39;ll create a new trace system call that will control tracing. It should take one argument, an integer &quot;mask&quot;, whose bits specify which system calls to trace. For example, to trace the fork system call, a program calls trace(1 &amp;lt;&amp;lt; SYS_fork), where SYS_fork is a syscall number from kernel/syscall.h. You have to modify the xv6 kernel to print out a line when each system call is about to return, if the system call&#39;s number is set in the mask. The line should contain the process id, the name of the system call and the return value; you don&#39;t need to print the system call arguments. The trace system call should enable tracing for the process that calls it and any children that it subsequently forks, but should not affect other processes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;将相应的文件添加到&lt;em&gt;user/user.h&lt;/em&gt;和&lt;em&gt;user/usys.pl&lt;/em&gt;中，向&lt;em&gt;kernel/syscall.h&lt;/em&gt;文件中添加本实验所需要添加的系统调用号。&lt;/li&gt;
&lt;li&gt;向&lt;em&gt;kernel/sysproc.c&lt;/em&gt;中添加系统调用函数&lt;em&gt;sys_trace&lt;/em&gt;，以及需要在进程的结构体中，新建一个变量Mask由低位开始偏移系统调用号个bit的值(通过观察&lt;em&gt;syscall.h&lt;/em&gt;文件以及题目中给的case可以发现系统调用号对应二进制的bit)。&lt;/li&gt;
&lt;li&gt;还需要再&lt;em&gt;kernel/proc.c/fork&lt;/em&gt;函数中使得子进程继承父进程的Mask属性。&lt;/li&gt;
&lt;li&gt;参照&lt;em&gt;kernel/syscall.c&lt;/em&gt;中别的系统调用，通过阅读&lt;em&gt;user/trace.c&lt;/em&gt;代码，使用&lt;em&gt;argint&lt;/em&gt;函数来提取命令行中的第一个参数作为掩码赋给进程属性Mask，还需要定义系统调用号对应的系统调用名数组。&lt;/li&gt;
&lt;li&gt;需要注意的点，a0作为返回值且a7作为系统调用号，在&lt;em&gt;trace&lt;/em&gt;调用后打印信息时需要用到&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;实现&quot;&gt;&lt;strong&gt;1.2 实现&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;这里贴出部分代码&lt;/p&gt;
&lt;p&gt;kernel/syscall.c/syscall &lt;/p&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;syscall&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; num;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;proc&lt;/span&gt; *p = &lt;span class=&quot;built_in&quot;&gt;myproc&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    num = p-&amp;gt;trapframe-&amp;gt;a7;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(num &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; num &amp;lt; &lt;span class=&quot;built_in&quot;&gt;NELEM&lt;/span&gt;(syscalls) &amp;amp;&amp;amp; syscalls[num]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        p-&amp;gt;trapframe-&amp;gt;a0 = syscalls[num]();  &lt;span class=&quot;comment&quot;&gt;// reap return value.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; num) &amp;amp; p-&amp;gt;mask)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;%d: syscall %s -&amp;gt; %d\n&amp;quot;&lt;/span&gt;, p-&amp;gt;pid, syscall_name[num], p-&amp;gt;trapframe-&amp;gt;a0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;%d %s: unknown sys call %d\n&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                p-&amp;gt;pid, p-&amp;gt;name, num);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        p-&amp;gt;trapframe-&amp;gt;a0 = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; kernel/sysproc.c/sys_trace &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;uint64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;sys_trace&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; mask;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;argint&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &amp;amp;mask) &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;myproc&lt;/span&gt;()-&amp;gt;mask = mask;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="MIT 6.S081" scheme="https://mitmoksha.github.io/categories/MIT-6-S081/"/>
    
    
  </entry>
  
  <entry>
    <title>MIT 6.S081 Lab1: Xv6 and Unix utilities</title>
    <link href="https://mitmoksha.github.io/2022/05/16/s081-lab1/"/>
    <id>https://mitmoksha.github.io/2022/05/16/s081-lab1/</id>
    <published>2022-05-16T09:53:02.000Z</published>
    <updated>2022-05-16T10:05:20.147Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;mit-6.s081-lab1-xv6-and-unix-utilities&quot;&gt;MIT 6.S081 Lab1: Xv6 and Unix utilities&lt;/h1&gt;
&lt;h2 id=&quot;sleep&quot;&gt;&lt;strong&gt;1. sleep&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;描述&quot;&gt;&lt;strong&gt;1.1 描述&lt;/strong&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Implement the UNIX program &lt;strong&gt;&lt;em&gt;sleep&lt;/em&gt;&lt;/strong&gt; for xv6; your &lt;strong&gt;&lt;em&gt;sleep&lt;/em&gt;&lt;/strong&gt; should pause for a user-specified number of ticks. A tick is a notion of time defined by the xv6 kernel, namely the time between two interrupts from the timer chip. Your solution should be in the file &lt;strong&gt;&lt;em&gt;user/sleep.c&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以了解一下atoi的简单实现，参考一下user文件中的其他命令的实现。&lt;/p&gt;
&lt;h3 id=&quot;实现&quot;&gt;&lt;strong&gt;1.2 实现&lt;/strong&gt;&lt;/h3&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;kernel/types.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;kernel/stat.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;user/user.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt;* argv[])&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (argc &amp;lt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;usage: sleep second\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;built_in&quot;&gt;atoi&lt;/span&gt;(argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;sleep&lt;/span&gt;(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;pingpong&quot;&gt;&lt;strong&gt;2. pingpong&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;描述-1&quot;&gt;&lt;strong&gt;2.1 描述&lt;/strong&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Write a program that uses UNIX system calls to &#39;&#39;ping-pong&#39;&#39; a byte between two processes over a pair of pipes, one for each direction. The parent should send a byte to the child; the child should print &quot;&lt;pid&gt;: received ping&quot;, where &lt;pid&gt; is its process ID, write the byte on the pipe to the parent, and exit; the parent should read the byte from the child, print &quot;&lt;pid&gt;: received pong&quot;, and exit. Your solution should be in the file user/pingpong.c.&lt;/pid&gt;&lt;/pid&gt;&lt;/pid&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="MIT 6.S081" scheme="https://mitmoksha.github.io/categories/MIT-6-S081/"/>
    
    
  </entry>
  
  <entry>
    <title>CS61B GITLET PROJECT</title>
    <link href="https://mitmoksha.github.io/2022/05/16/CS61B-GITLET-PROJECT/"/>
    <id>https://mitmoksha.github.io/2022/05/16/CS61B-GITLET-PROJECT/</id>
    <published>2022-05-16T09:39:52.000Z</published>
    <updated>2022-05-16T09:40:17.904Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;cs61b-gitlet&quot;&gt;CS61B Gitlet&lt;/h1&gt;
&lt;h2 id=&quot;project-2-getting-startedlab6&quot;&gt;&lt;strong&gt;Project 2 Getting Started(Lab6)&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;preperation&quot;&gt;&lt;strong&gt;Preperation&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;首先使用&lt;code&gt;git submodule update --init --recursive&lt;/code&gt;命令将21sp的library更新，再一并复制过来。记得再当前操作系统中设置&lt;code&gt;REPO_DIR&lt;/code&gt;环境变量为所有projA、HW的根目录。切记要注意看文档, 以及其中给出的设置来实现相应的功能, 最后才发现FAQ也给了非常好的提示，另外比如说在我的机器上使用&lt;code&gt;python&lt;/code&gt;而不是&lt;code&gt;python3&lt;/code&gt;，&lt;code&gt;make check&lt;/code&gt;是跑不通的，需要找到&lt;code&gt;Makefile&lt;/code&gt;的第25行, 修改为&lt;code&gt;PYTHON = python&lt;/code&gt;。 &lt;/p&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta prompt_&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt;java capers.Main story &lt;span class=&quot;string&quot;&gt;&amp;quot;Once upon a time, there was a beautiful dog.&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Once upon a time, there was a beautiful dog.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta prompt_&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta prompt_&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt;java capers.Main story &lt;span class=&quot;string&quot;&gt;&amp;quot;That dog was named Fjerf.&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Once upon a time, there was a beautiful dog.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;That dog was named Fjerf.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta prompt_&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta prompt_&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt;java capers.Main story &lt;span class=&quot;string&quot;&gt;&amp;quot;Fjerf loved to run and jump.&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Once upon a time, there was a beautiful dog.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;That dog was named Fjerf.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Fjerf loved to run and jump.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta prompt_&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta prompt_&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt;java capers.Main dog Mammoth &lt;span class=&quot;string&quot;&gt;&amp;quot;German Spitz&amp;quot;&lt;/span&gt; 10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Woof! My name is Mammoth and I am a German Spitz! I am 10 years old! Woof!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta prompt_&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt;java capers.Main dog Qitmir Saluki 3&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Woof! My name is Qitmir and I am a Saluki! I am 3 years old! Woof!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta prompt_&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt;java capers.Main birthday Qitmir&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Woof! My name is Qitmir and I am a Saluki! I am 4 years old! Woof!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Happy birthday! Woof! Woof!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta prompt_&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt;java capers.Main birthday Qitmir&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Woof! My name is Qitmir and I am a Saluki! I am 5 years old! Woof!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Happy birthday! Woof! Woof!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; 准备开始Gitlet:&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;gitlet&quot;&gt;&lt;strong&gt;Gitlet&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;参考资料&quot;&gt;&lt;strong&gt;参考资料&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Git pro book&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;note&quot;&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/h3&gt;</summary>
    
    
    
    <category term="CS61B" scheme="https://mitmoksha.github.io/categories/CS61B/"/>
    
    
  </entry>
  
  <entry>
    <title>CS61C CPU PROJECT</title>
    <link href="https://mitmoksha.github.io/2022/05/16/CS61C-CPU-PROJECT/"/>
    <id>https://mitmoksha.github.io/2022/05/16/CS61C-CPU-PROJECT/</id>
    <published>2022-05-16T09:37:37.000Z</published>
    <updated>2022-05-16T09:38:29.757Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;cs61c-cpu-project&quot;&gt;&lt;strong&gt;CS61C CPU PROJECT&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&quot;关于如何debug&quot;&gt;&lt;strong&gt;关于如何Debug&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;相信前面的&lt;code&gt;lab5&lt;/code&gt;和&lt;code&gt;lab6&lt;/code&gt;已经奠定好了使用&lt;code&gt;logisim&lt;/code&gt;的基础，前面相关内容同样奠定好了RISC-V ISA的知识基础。接下来Project中的一系列的task可以通过参考: - &lt;code&gt;61C Reference card&lt;/code&gt; - &lt;code&gt;ROM&lt;/code&gt;表 - 对应测试文件中的汇编代码和测试电路 - 通过&lt;code&gt;change value&lt;/code&gt;来对电路中的bit位进行赋值，查看输入输出的值&lt;/p&gt;
&lt;p&gt;需要将所有这些结合起来构建完整的&lt;code&gt;big picture&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;alu&quot;&gt;&lt;strong&gt;ALU&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;根据文档中给的功能类别通过门级电路来构造基本的ALU原件，个别功能的实现所用到的元器件还需要查看手册。 &lt;img src=&quot;https://pic4.zhimg.com/80/v2-014bf51c0d29af49c1b904c3cb4a28e2.png&quot; alt=&quot;ALU&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;regfile&quot;&gt;&lt;strong&gt;RegFile&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;需要用到&lt;code&gt;Multiplexer&lt;/code&gt;和&lt;code&gt;Demultiplexer&lt;/code&gt;，以及一些基本的逻辑，比较废鼠标... &lt;img src=&quot;https://pic4.zhimg.com/80/v2-2bc53f743fb481fc3a22f8c141f95071.png&quot; alt=&quot;Regfile&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;immediate-generator&quot;&gt;&lt;strong&gt;Immediate Generator&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;这一部分跟着61C绿卡里的指令编码表。以下显示的是所有含有imm部分的指令的实现。 &lt;img src=&quot;https://pic4.zhimg.com/80/v2-f46d246882abfdf6f28e13266e41c363.png&quot; alt=&quot;Imm-gen&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="CS61C" scheme="https://mitmoksha.github.io/categories/CS61C/"/>
    
    
  </entry>
  
  <entry>
    <title>CSAPP Lab2: Bomb Lab</title>
    <link href="https://mitmoksha.github.io/2022/05/16/CSAPP-Lab2-Bomb-Lab/"/>
    <id>https://mitmoksha.github.io/2022/05/16/CSAPP-Lab2-Bomb-Lab/</id>
    <published>2022-05-16T09:36:28.000Z</published>
    <updated>2022-05-16T09:38:42.677Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;csapp-lab2-bomb-lab&quot;&gt;CSAPP Lab2: Bomb Lab&lt;/h1&gt;
&lt;h2 id=&quot;preparation&quot;&gt;&lt;strong&gt;Preparation&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;建议在实验大致看一下lab相关的&lt;a href=&quot;http://www.cs.cmu.edu/afs/cs/academic/class/15213-f20/www/recitations/f20New/recitation02-bomblab.pdf&quot;&gt;pdf&lt;/a&gt;。使用&lt;code&gt;man&lt;/code&gt;手册来查看库函数，&lt;code&gt;callq … &amp;lt;_exit@plt&amp;gt;&lt;/code&gt;类型为C的库函数。注意商用的architecture是以字节为单位编址寻址。&lt;/p&gt;
&lt;p&gt;参考CS61C所了解到的Tool, 做足了准备工作。安装&lt;code&gt;CGDB&lt;/code&gt;, 相比较于&lt;code&gt;GDB&lt;/code&gt;的&lt;code&gt;tui&lt;/code&gt;在调试lab时显示不会出现乱码的情况。从&lt;code&gt;ubuntu&lt;/code&gt;中&lt;code&gt;apt-get&lt;/code&gt;下载到的版本较低，一些功能不适用。参考&lt;a href=&quot;https://cgdb.github.io/&quot;&gt;CGDB官网&lt;/a&gt;下载最新版本的&lt;code&gt;CGDB&lt;/code&gt;, 简单浏览了一下&lt;a href=&quot;https://cgdb.github.io/docs/cgdb.pdf&quot;&gt;CGDB官方手册&lt;/a&gt;, 以及对应&lt;code&gt;CGDB&lt;/code&gt;在&lt;code&gt;~/.cgdb/cgdbrc&lt;/code&gt;文件中做了如下的配置足以满足调试需求: &lt;/p&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;:set disasm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:set hls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:set syn=style&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; 另外gdb相关内容再推荐这两本书籍 &lt;code&gt;Debugs Hacks&lt;/code&gt;和&lt;code&gt;Debugging with GDB&lt;/code&gt;。&lt;p&gt;&lt;/p&gt;
&lt;p&gt;需要用&lt;code&gt;chmod&lt;/code&gt;命令修改一下&lt;code&gt;bomb&lt;/code&gt;二进制文件的可执行权限&lt;/p&gt;
&lt;p&gt;接下来可以愉快地开始&lt;code&gt;bomb lab&lt;/code&gt;了~&lt;/p&gt;</summary>
    
    
    
    <category term="CMU15-213" scheme="https://mitmoksha.github.io/categories/CMU15-213/"/>
    
    
  </entry>
  
  <entry>
    <title>CSAPP Lab1: Data Lab</title>
    <link href="https://mitmoksha.github.io/2022/05/16/CSAPP-Lab1-Data-Lab/"/>
    <id>https://mitmoksha.github.io/2022/05/16/CSAPP-Lab1-Data-Lab/</id>
    <published>2022-05-16T09:32:17.000Z</published>
    <updated>2022-05-16T09:38:56.401Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;csapp-lab1-data-lab&quot;&gt;CSAPP Lab1: Data Lab&lt;/h1&gt;
&lt;h2 id=&quot;some-restriction&quot;&gt;&lt;strong&gt;Some Restriction&lt;/strong&gt;&lt;/h2&gt;
&lt;h4 id=&quot;integer-coding-rules&quot;&gt;&lt;strong&gt;Integer Coding Rules&lt;/strong&gt;&lt;/h4&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;Expr
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;整型操作数的值被限制在范围[0, 255]。&lt;/li&gt;
&lt;li&gt;不能使用全局变量&lt;/li&gt;
&lt;li&gt;只能使用的一元操作&lt;code&gt;!&lt;/code&gt;, &lt;code&gt;~&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;只能使用的二元操作&lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;一个表达式不会被限制拥有多个操作符&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Fobidden
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;使用控制语句如&lt;code&gt;if&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;switch&lt;/code&gt;等等&lt;/li&gt;
&lt;li&gt;定义或使用任何宏&lt;/li&gt;
&lt;li&gt;在当前文件中定义任何额外的函数&lt;/li&gt;
&lt;li&gt;调用任何函数&lt;/li&gt;
&lt;li&gt;使用其他操作&lt;/li&gt;
&lt;li&gt;使用类型转换&lt;/li&gt;
&lt;li&gt;使用除&lt;code&gt;int&lt;/code&gt;之外的任何数据类型，使用&lt;code&gt;arrays&lt;/code&gt;, &lt;code&gt;structs&lt;/code&gt;, &lt;code&gt;unions&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;假设机器的配置
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;使用2的补码，&lt;code&gt;int&lt;/code&gt;的表示为32-bit&lt;/li&gt;
&lt;li&gt;执行算术右移&lt;/li&gt;
&lt;li&gt;如果左移的位数小于0或者大于31则会出现未预测的行为。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;floating-point-coding-rules&quot;&gt;&lt;strong&gt;Floating Point Coding Rules&lt;/strong&gt;&lt;/h4&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;Forbidden
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;定义或使用任何宏&lt;/li&gt;
&lt;li&gt;定义任何额外的函数&lt;/li&gt;
&lt;li&gt;调用任何函数&lt;/li&gt;
&lt;li&gt;使用任何形式的类型转换&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;arrays&lt;/code&gt;, &lt;code&gt;structs&lt;/code&gt;, &lt;code&gt;unions&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;notes&quot;&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/h4&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;使用&lt;code&gt;dlc&lt;/code&gt;(data tab checker)编译器来检查解决方案的合理性&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;btest&lt;/code&gt;来检查你的函数的正确性&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;BDD checker&lt;/code&gt;来正式地证实你的函数&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;lab-note&quot;&gt;&lt;strong&gt;lab Note&lt;/strong&gt;&lt;/h4&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;64位机器上编译32位程序会出现错误&lt;code&gt;fatal error: bits/libc-header-start.h: 没有那个文件或目录&lt;/code&gt;，是因为gcc没有安装&lt;code&gt;multilib&lt;/code&gt;库，这个库可以在64位的机器上产生32位的程序&lt;code&gt;sudo apt install gcc-multilib&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="CMU15-213" scheme="https://mitmoksha.github.io/categories/CMU15-213/"/>
    
    
  </entry>
  
  <entry>
    <title>6.NULL Video Note</title>
    <link href="https://mitmoksha.github.io/2022/05/16/6-NULL-Video-Note/"/>
    <id>https://mitmoksha.github.io/2022/05/16/6-NULL-Video-Note/</id>
    <published>2022-05-16T09:26:09.000Z</published>
    <updated>2022-05-16T09:26:59.284Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;section&quot;&gt;&lt;/h2&gt;
&lt;h2 id=&quot;video-1-the-shell&quot;&gt;&lt;strong&gt;VIDEO 1&lt;/strong&gt; The Shell&lt;/h2&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;code&gt;cd -&lt;/code&gt;将会在和上一次cd的目录来回切换&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rm&lt;/code&gt;命令默认非递归的删除，因此删除目录时需要加上-r参数(recursive)，才能完整地将目录下的文件删除;而rmdir只能删除空目录&lt;/li&gt;
&lt;li&gt;解释一下常用命令的含义&lt;code&gt;pwd&lt;/code&gt;(print work directory), &lt;code&gt;cd&lt;/code&gt;(change directory)&lt;/li&gt;
&lt;li&gt;-表示当前没有允许的权限。d表示目录，注意目录的x位表示当前能够访问该目录的内容，且需要保证当前目录的父目录都含有x位才能访问。&lt;/li&gt;
&lt;li&gt;redirect, &amp;lt; 表示重定向输入, &amp;gt; 表示重定向输出. Some example: &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;missing:~$ &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; hello &amp;gt; hello.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;missing:~$ &lt;span class=&quot;built_in&quot;&gt;cat&lt;/span&gt; hello.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hello&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;missing:~$ &lt;span class=&quot;built_in&quot;&gt;cat&lt;/span&gt; &amp;lt; hello.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hello&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;missing:~$ &lt;span class=&quot;built_in&quot;&gt;cat&lt;/span&gt; &amp;lt; hello.txt &amp;gt; hello2.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;missing:~$ &lt;span class=&quot;built_in&quot;&gt;cat&lt;/span&gt; hello2.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hello&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;表示追加(append)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl+L&lt;/code&gt;清空终端的命令，返回到顶部。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tail -n&lt;/code&gt;将数据中的末尾n行显示出来。&lt;/li&gt;
&lt;li&gt;pipe，将两个不相关联的程序连接起来通过input/output连接起来,管道的左边作为一个input, 管道的右边作为一个output。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&lt;/code&gt;表示当前运行在用户模式下; &lt;code&gt;#&lt;/code&gt;表示当前运行在系统模式下,可以通过命令&lt;code&gt;sudo su&lt;/code&gt;来打开root下的terminal.&lt;/li&gt;
&lt;li&gt;xdg-open命令可以打开文件对应的格式&lt;/li&gt;
&lt;li&gt;double quotes: backslash, &lt;code&gt;\&lt;/code&gt;前面加个&lt;code&gt;!&lt;/code&gt;就不会被默认移除&lt;/li&gt;
&lt;li&gt;shebang是由脚本开头的字符数字符号和感叹号&lt;code&gt;#!&lt;/code&gt;组成的字符序列。当带有shebang的文本文件被用作类Unix操作系统的&quot;可执行文件&quot;时，程序加载器机制将文件初始行的其余部分解析为&quot;解释器指令&quot;。它告诉内核用什么来运行此脚本(比如说python or shell?)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;video-2-shell-tools-and-scripting&quot;&gt;&lt;strong&gt;VIDEO 2&lt;/strong&gt; Shell Tools and Scripting&lt;/h2&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;different from the single quote&lt;code&gt;(&#39;)&lt;/code&gt; and double quote&lt;code&gt;(&quot;)&lt;/code&gt;. echo &quot;&quot;中解析出变量放变量(用&lt;code&gt;$&lt;/code&gt;符号来表示)。而单引号不会解析变量。&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$1&lt;/code&gt;到&lt;code&gt;$9&lt;/code&gt;表示argv中第一个到第九个参数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$0&lt;/code&gt;表示脚本的名字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$_&lt;/code&gt;(undersocre)表示上一个command的最后一个参数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$?&lt;/code&gt;(question mark)获取上一个command的error code(一般值为&lt;code&gt;0&lt;/code&gt;表示ok, &lt;code&gt;1&lt;/code&gt;表示执行出错)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$#&lt;/code&gt;(hash)表示参数的个数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$$&lt;/code&gt;表示当前进程的ID&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$@&lt;/code&gt;表示所有参数。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!!&lt;/code&gt;(bang)代替上一次执行过的command，比如说创建一个目录&lt;code&gt;mkdir ..&lt;/code&gt;没有权限，这时候只需要&lt;code&gt;sudo !!&lt;/code&gt;, 就会默认表示&lt;code&gt;sudo mkdir ..&lt;/code&gt;从而减少了一些重复性的工作。&lt;/li&gt;
&lt;li&gt;;(semicolon)分号可以连接任何命令行。&lt;code&gt;false ; echo &quot;haha&quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;脚本中变量用双引号引起来&lt;code&gt;&quot;$1&quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;执行脚本&lt;code&gt;source ..&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;globbing, *(asterisk), {}(curly braces)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tldr&lt;/code&gt;(too long, don&#39;t read), 精简版带example的man&lt;/li&gt;
&lt;li&gt;&lt;code&gt;test&lt;/code&gt;, 查看man手册&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;查找文件&lt;/strong&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;find&lt;/code&gt;查看man手册 &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查找所有名称为src的文件夹&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;find . -name src -&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt; d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查找所有文件夹路径中包含test的python文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;find . -path &lt;span class=&quot;string&quot;&gt;&amp;#x27;*/test/*.py&amp;#x27;&lt;/span&gt; -&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt; f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查找前一天修改的所有文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;find . -mtime -1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查找所有大小在500k至10M的tar.gz文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;find . -size +500k -size -10M -name &lt;span class=&quot;string&quot;&gt;&amp;#x27;*.tar.gz&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 删除全部扩展名为.tmp 的文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;find . -name &lt;span class=&quot;string&quot;&gt;&amp;#x27;*.tmp&amp;#x27;&lt;/span&gt; -&lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;rm&lt;/span&gt; &amp;#123;&amp;#125; \;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查找全部的 PNG 文件并将其转换为 JPG&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;find . -name &lt;span class=&quot;string&quot;&gt;&amp;#x27;*.png&amp;#x27;&lt;/span&gt; -&lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt; convert &amp;#123;&amp;#125; &amp;#123;&amp;#125;.jpg \;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sharkdp/fd&quot;&gt;fd&lt;/a&gt;, find的替代物&lt;/li&gt;
&lt;li&gt;&lt;code&gt;locate&lt;/code&gt;, 只能通过文件名，但速度很快。locate(1)当您只是尝试按名称查找特定文件时会更好，该文件您知道存在，但您只是不记得它的确切位置。find(1)当您有一个重点领域需要检查时，或者当您需要其众多优势中的任何一个时，效果会更好&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;11&quot; type=&quot;1&quot;&gt;
&lt;li&gt;&lt;code&gt;shellcheck&lt;/code&gt;检查shell脚本的语法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;查找代码&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;grep&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://beyondgrep.com/&quot;&gt;awk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;rg&lt;/a&gt;(ripgrep) &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查找所有使用了 requests 库的文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rg -t py &lt;span class=&quot;string&quot;&gt;&amp;#x27;import requests&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查找所有没有写 shebang 的文件（包含隐藏文件）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rg -u --files-without-match &lt;span class=&quot;string&quot;&gt;&amp;quot;^#!&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查找所有的foo字符串，并打印其之后的5行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rg foo -A 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 打印匹配的统计信息（匹配的行和文件的数量）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rg --stats PATTERN&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;查找shell命令&lt;/strong&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;history&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl+R&lt;/code&gt;, backward search. 搭配&lt;a href=&quot;https://github.com/junegunn/fzf/wiki/Configuring-shell-key-bindings#ctrl-r&quot;&gt;fzf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;14&quot; type=&quot;1&quot;&gt;
&lt;li&gt;&lt;strong&gt;文件夹导航&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tree&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;broot&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jarun/nnn&quot;&gt;nnn&lt;/a&gt;, 需要接下来去学习&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;shell中使用变量需要加&lt;code&gt;&quot;&quot;&lt;/code&gt;(double quote), 当变量中含有命令时需要加括号比如&lt;code&gt;&quot;$(pwd)&quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;进行比较时需要加&lt;code&gt;[[]]&lt;/code&gt;双括号，比如说&lt;code&gt;if [[ n -eq 12 ]]; then&lt;/code&gt;, &lt;strong&gt;注意&lt;/strong&gt;括号左右要有空格否则出错。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://linuxhint.com/bash_globbing_tutorial/&quot;&gt;globbing&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;exercise2&quot;&gt;&lt;strong&gt;Exercise2&lt;/strong&gt;&lt;/h2&gt;</summary>
    
    
    
    <category term="6.NULL" scheme="https://mitmoksha.github.io/categories/6-NULL/"/>
    
    
  </entry>
  
  <entry>
    <title>Makefile Note</title>
    <link href="https://mitmoksha.github.io/2022/05/16/Makefile-Note/"/>
    <id>https://mitmoksha.github.io/2022/05/16/Makefile-Note/</id>
    <published>2022-05-16T09:24:07.000Z</published>
    <updated>2022-05-16T10:11:39.117Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;makefile-note&quot;&gt;Makefile Note&lt;/h1&gt;
&lt;p&gt;参考&lt;a href=&quot;https://seisman.github.io/how-to-write-makefile/introduction.html&quot;&gt;跟我一起写Makefile&lt;/a&gt;做点笔记。 - 第一个&lt;code&gt;target&lt;/code&gt;为&lt;code&gt;make&lt;/code&gt;的默认目标 - &lt;code&gt;prerequisites&lt;/code&gt;中如果有一个以上的文件比&lt;code&gt;target&lt;/code&gt;文件要新的话，&lt;code&gt;command&lt;/code&gt;所定义的命令就会被执行 &lt;/p&gt;&lt;figure class=&quot;highlight makefile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;target ... : prerequisites ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    command&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; - 最开始的实例 &lt;figure class=&quot;highlight makefile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;edit : main.o kbd.o command.o display.o \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        insert.o search.o files.o utils.o&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cc -o edit main.o kbd.o command.o display.o \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        insert.o search.o files.o utils.o&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;main.o : main.c defs.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cc -c main.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kbd.o : kbd.c defs.h command.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cc -c kbd.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;command.o : command.c defs.h command.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cc -c command.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;display.o : display.c defs.h buffer.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cc -c display.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;insert.o : insert.c defs.h buffer.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cc -c insert.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;search.o : search.c defs.h buffer.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cc -c search.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;files.o : files.c defs.h buffer.h command.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cc -c files.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;utils.o : utils.c defs.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cc -c utils.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clean :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rm edit main.o kbd.o command.o display.o \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        insert.o search.o files.o utils.o&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; - 为了复用可以在&lt;code&gt;Makefile&lt;/code&gt;中使用&lt;code&gt;shell&lt;/code&gt;的变量 &lt;figure class=&quot;highlight makefile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;objects = main.o kbd.o command.o display.o \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    insert.o search.o files.o utils.o&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;edit : &lt;span class=&quot;variable&quot;&gt;$(objects)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cc -o edit &lt;span class=&quot;variable&quot;&gt;$(objects)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;main.o : main.c defs.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cc -c main.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kbd.o : kbd.c defs.h command.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cc -c kbd.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;command.o : command.c defs.h command.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cc -c command.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;display.o : display.c defs.h buffer.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cc -c display.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;insert.o : insert.c defs.h buffer.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cc -c insert.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;search.o : search.c defs.h buffer.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cc -c search.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;files.o : files.c defs.h buffer.h command.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cc -c files.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;utils.o : utils.c defs.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cc -c utils.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clean :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rm edit &lt;span class=&quot;variable&quot;&gt;$(objects)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; - &lt;code&gt;make&lt;/code&gt;会自动推导命令，只要&lt;code&gt;Make&lt;/code&gt;看到一个&lt;code&gt;.o&lt;/code&gt;</summary>
    
    
    
    <category term="Computer Science Notes" scheme="https://mitmoksha.github.io/categories/Computer-Science-Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>vim+vscode+tmux+gdb</title>
    <link href="https://mitmoksha.github.io/2022/05/16/vim-vscode-tmux-gdb/"/>
    <id>https://mitmoksha.github.io/2022/05/16/vim-vscode-tmux-gdb/</id>
    <published>2022-05-16T09:09:48.000Z</published>
    <updated>2022-05-16T10:11:28.059Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;vimvscodetmuxgdbgit&quot;&gt;vim+vscode+tmux+gdb+git&lt;/h1&gt;
&lt;p&gt;个人的一些认为比较常用以及不经常用到的的快捷操作 ## &lt;strong&gt;vscode&lt;/strong&gt; 1. 查找文件ctrl+p， esc退出 2. 分割屏幕ctrl+，通过ctrl+1/2/3来切换分割屏幕的焦点 3. ctrl+` 打开/关闭终端 4. ctrl+tab, 在tab之间切换 5. 模糊查找当前工作目录下的所有文件ctrl+p, # 6. Ctrl + Shift + Tab 导航tab 7. alt + &amp;lt;-/-&amp;gt;切换tab&lt;/p&gt;
&lt;h2 id=&quot;vim&quot;&gt;&lt;strong&gt;vim&lt;/strong&gt;&lt;/h2&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;跳转到指定行号n, ngg&lt;/li&gt;
&lt;li&gt;复制整行 yy, 复制包括当前行接下来n行， nyy&lt;/li&gt;
&lt;li&gt;复制指定行v模式下指定复制内容，然后y键复制。&lt;/li&gt;
&lt;li&gt;粘贴 如复制内容不是一整行：p粘贴到当前光标处，P粘贴到当前行首。 如复制内容是一整行：p粘贴到当前行的下一行，P粘贴到当前行的上一行&lt;/li&gt;
&lt;li&gt;剪切dd&lt;/li&gt;
&lt;li&gt;在当前文件查找指定内容，/+内容&lt;/li&gt;
&lt;li&gt;ctrl+] 跳转到函数的定义处，ctrl+t返回上一次光标处&lt;/li&gt;
&lt;li&gt;u撤销，ctrl+r恢复&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^y&lt;/code&gt;向上移动一行, &lt;code&gt;^e&lt;/code&gt;向下移动一行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^b&lt;/code&gt;向上移动一页，&lt;code&gt;^f&lt;/code&gt;向下移动一页&lt;/li&gt;
&lt;li&gt;number + shift + G, 跳到第number行&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;tab&lt;/code&gt;之间切换, &lt;code&gt;Alt&lt;/code&gt;+&lt;code&gt;number&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;可视条件下选中后&lt;code&gt;&amp;lt;&lt;/code&gt;或&lt;code&gt;&amp;gt;&lt;/code&gt;完成缩进。&lt;/li&gt;
&lt;li&gt;要想跳转到函数定义处，需要在项目目录中输入&lt;code&gt;ctags -R&lt;/code&gt;命令。&lt;code&gt;ctrl+]&lt;/code&gt;跳转, &lt;code&gt;ctrl+o&lt;/code&gt;返回。&lt;/li&gt;
&lt;li&gt;可视模式下注释+&lt;code&gt;d&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;替换变量名&lt;code&gt;:%s/foo/bar/g&lt;/code&gt;将整个文件中的&lt;code&gt;foo&lt;/code&gt;替换为&lt;code&gt;bar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在vim文件内使用shell命令&lt;code&gt;:! command&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在当前文件中打开另一个文件&lt;code&gt;:e file&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在Vim中编译代码&lt;code&gt;:!gcc %&lt;/code&gt;, 编译并运行代码&lt;code&gt;:!gcc % || ./a.out&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;tmux&quot;&gt;&lt;strong&gt;tmux&lt;/strong&gt;&lt;/h2&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;任何命令都需要加ctrl+b前缀&lt;/li&gt;
&lt;li&gt;c创建窗口；n, p切换窗口&lt;/li&gt;
&lt;li&gt;%垂直分屏, &quot;水平分屏&lt;/li&gt;
&lt;li&gt;x关闭窗口&lt;/li&gt;
&lt;li&gt;o在窗口之间切换&lt;/li&gt;
&lt;li&gt;PgUp开启tmux终端界面的翻页，q退出。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;gdb&quot;&gt;&lt;strong&gt;gdb&lt;/strong&gt;&lt;/h2&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;delete 删除所有断点&lt;/li&gt;
&lt;li&gt;layout src/reg/asm 显示c源代码、寄存器和汇编，但未分屏；focus src/reg/asm在src、reg和asm的tui中来回切换&lt;/li&gt;
&lt;li&gt;layout split获得c和asm的分屏。&lt;/li&gt;
&lt;li&gt;info/i frame 查看栈帧, info/i args查看传递给main的参数, i locals显示当前的本地变量。&lt;/li&gt;
&lt;li&gt;通过backtrace查看栈帧，frame n(n为bt结果的栈帧号)，然后i frame查看当前栈帧号的详细内容&lt;/li&gt;
&lt;li&gt;print/p查看argv数据;print/p &lt;em&gt;argv(默认打印一个参数);可以通过print/p &lt;/em&gt;argv@n 来选择argv数组中的n个元素即参数; p *argv@argc打印所有参数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print&lt;/code&gt;是打印值，&lt;code&gt;x&lt;/code&gt;是访问主存。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + x&lt;/code&gt;，再按1：单窗口模式，显示一个窗口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + x&lt;/code&gt;，再按2：双窗口模式，显示两个窗口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + x&lt;/code&gt;，再按a：回到传统模式，即退出layout，回到执行layout之前的调试窗口。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^x+a&lt;/code&gt;关闭可视化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wa&lt;/code&gt;跟踪某个变量(watch point)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;gdb续&quot;&gt;&lt;strong&gt;&amp;lt;&lt;debug hacks&gt;&amp;gt;(gdb续)&lt;/debug&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;code&gt;break/b&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;break 函数名&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;break 行号&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;break 文件名:行号&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;break 文件名:函数名&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;break +偏移量&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;break -偏移量&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;break *地址&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;break 断点 if 条件&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;若不指定位置就默认在下一行代码上设置断点&lt;/li&gt;
&lt;li&gt;&lt;code&gt;info break&lt;/code&gt;显示断点信息&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;run/r&lt;/code&gt;, 如果不加参数，执行到断点位置后暂停运行(和start命令一样的效果)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print/p&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;p $eax&lt;/code&gt;，显示寄存器(寄存器名前加$)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p/格式 变量&lt;/code&gt;, 显示寄存器可用的格式:
&lt;ul&gt;
&lt;li&gt;x, 显示为十六进制数&lt;/li&gt;
&lt;li&gt;d, 显示为十进制数&lt;/li&gt;
&lt;li&gt;u, 显示无符号十进制数&lt;/li&gt;
&lt;li&gt;o, 显示八进制数&lt;/li&gt;
&lt;li&gt;t, 显示二进制数(two)&lt;/li&gt;
&lt;li&gt;a, 显示地址&lt;/li&gt;
&lt;li&gt;c, 显示为字符&lt;/li&gt;
&lt;li&gt;f, 浮点小数&lt;/li&gt;
&lt;li&gt;s, 显示为字符串&lt;/li&gt;
&lt;li&gt;i, 显示为机器语言&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x/NFU ADDR&lt;/code&gt;, 显示内存的内容(eXamining):
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;N&lt;/code&gt;为重复次数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;F&lt;/code&gt;为上述的P格式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;U&lt;/code&gt;代表的单位：
&lt;ul&gt;
&lt;li&gt;b, 字节&lt;/li&gt;
&lt;li&gt;h, 半字&lt;/li&gt;
&lt;li&gt;w, 字(4字节默认)&lt;/li&gt;
&lt;li&gt;g, 双字&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Computer Science Notes" scheme="https://mitmoksha.github.io/categories/Computer-Science-Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>Advanced Cpp Note</title>
    <link href="https://mitmoksha.github.io/2022/05/16/cpp%20Note/"/>
    <id>https://mitmoksha.github.io/2022/05/16/cpp%20Note/</id>
    <published>2022-05-16T07:39:40.000Z</published>
    <updated>2022-05-16T09:13:05.542Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;一stdfunction和bind绑定器&quot;&gt;一、std::function和bind绑定器&lt;/h2&gt;
&lt;h3 id=&quot;可调用对象&quot;&gt;可调用对象&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;是一个函数指针&lt;/li&gt;
&lt;li&gt;是一个具有&lt;code&gt;operator()&lt;/code&gt;成员函数的类对象（仿函数）&lt;/li&gt;
&lt;li&gt;是一个可被转换为函数指针的类对象&lt;/li&gt;
&lt;li&gt;是一个类成员（函数）指针&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;可调用对象包装器stdfuntion&quot;&gt;可调用对象包装器std::funtion&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;头文件&lt;code&gt;&amp;lt;functional&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可以容纳除了类成员（函数）指针之外的所有可调用对象&lt;/li&gt;
&lt;li&gt;可以用统一的方式处理函数、函数对象、函数指针，并允许保存和延迟执行它们&lt;/li&gt;
&lt;li&gt;&lt;code&gt;function&lt;/code&gt;比普通函数指针更灵活和便利&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;stdbind绑定器&quot;&gt;std::bind绑定器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;头文件&lt;code&gt;&amp;lt;functional&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;接受一个可调用对象，生成一个新的可调用对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::bind&lt;/code&gt;用来将可调用对象与其参数一起进行绑定，绑定后的结果可以使用&lt;code&gt;std::function&lt;/code&gt;进行保存，并延迟调用到任何我们需要的时候&lt;/li&gt;
&lt;li&gt;作用
&lt;ul&gt;
&lt;li&gt;将可调用对象与其参数一起绑定成一个仿函数(functor)&lt;/li&gt;
&lt;li&gt;将多元（参数个数为n）可调用对象转成一元或者（n-1）元可调用对象，却只绑定部分参数 &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;std::&lt;span class=&quot;built_in&quot;&gt;bind&lt;/span&gt;(output, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)();  &lt;span class=&quot;comment&quot;&gt;// 输出：1 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;std::&lt;span class=&quot;built_in&quot;&gt;bind&lt;/span&gt;(output, std::placeholders::_1, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;// 输出 ：1 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;std::&lt;span class=&quot;built_in&quot;&gt;bind&lt;/span&gt;(output, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, std::placeholders::_1)(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;// 输出 ：2 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::bind&lt;/code&gt;的返回类型是一个stl内部定义的仿函数类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::placeholders::_1&lt;/code&gt;是一个占位符，代表这个位置将在函数调用时被传入的第一个参数所替代&lt;/li&gt;
&lt;li&gt;组合bind函数
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::bind(std::greater&amp;lt;int&amp;gt;(), std::placeholders::_1, 5);&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;判断是否大于5的功能闭包&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;c11通过提供stdfunction和stdbind统一了可调用对象的各种操作&quot;&gt;C++11通过提供std::function和std::bind统一了可调用对象的各种操作&lt;/h3&gt;
&lt;h2 id=&quot;二lambda表达式&quot;&gt;二、lambda表达式&lt;/h2&gt;
&lt;h3 id=&quot;语法形式&quot;&gt;语法形式&lt;/h3&gt;</summary>
    
    
    
    <category term="PL" scheme="https://mitmoksha.github.io/categories/PL/"/>
    
    
  </entry>
  
</feed>
