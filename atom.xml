<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Moksha&#39;s Blog</title>
  
  
  <link href="https://mitmoksha.github.io/atom.xml" rel="self"/>
  
  <link href="https://mitmoksha.github.io/"/>
  <updated>2022-05-19T06:07:02.333Z</updated>
  <id>https://mitmoksha.github.io/</id>
  
  <author>
    <name>Pishun Huang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSAPP Ch3</title>
    <link href="https://mitmoksha.github.io/2022/05/19/CSAPP-Ch3/"/>
    <id>https://mitmoksha.github.io/2022/05/19/CSAPP-Ch3/</id>
    <published>2022-05-19T05:22:12.000Z</published>
    <updated>2022-05-19T06:07:02.333Z</updated>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IA32&lt;/code&gt;的64位扩展，也成为&lt;code&gt;x86-64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gcc -Og -S mstore.c&lt;/code&gt;，GCC会编译该代码且编译器会进行优化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;objdump -d mstore.o&lt;/code&gt;，由反汇编器将机器级代码转换成汇编代码，同时反汇编器会在汇编代码的&lt;code&gt;Label&lt;/code&gt;旁注上它所对应的地址; 需要注意的是反汇编后的汇编代码地址为链接阶段&lt;code&gt;重定向&lt;/code&gt;之后所处的地址，&lt;code&gt;链接器&lt;/code&gt;在程序代码中会插入&lt;code&gt;nop&lt;/code&gt;来提高访问存储器的性能(更好地放置下一个代码块)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x86-64&lt;/code&gt;指令长由从1到15个字节不等。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Variable Instruction&lt;/code&gt; vs. &lt;code&gt;Fixed Instruction&lt;/code&gt;，基于变长指令的ISA生成程序代码所需要的存储空间相对于定长指令更小，但增加了&lt;code&gt;DECODE&lt;/code&gt;的开销，这也是一个&lt;code&gt;Tradeoffs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ATT&lt;/code&gt;格式的汇编代码，&lt;code&gt;AT&amp;amp;T&lt;/code&gt;是运营贝尔实验室的公司，这种格式是&lt;code&gt;GCC&lt;/code&gt;，&lt;code&gt;OBJDUMP&lt;/code&gt;等工具的默认格式&lt;/li&gt;
&lt;li&gt;要想在C语言中编写汇编代码，可以通过&lt;code&gt;GCC&lt;/code&gt;的&lt;code&gt;内联汇编&lt;/code&gt;，用&lt;code&gt;asm&lt;/code&gt;伪指令来包含简短的汇编代码&lt;/li&gt;
&lt;li&gt;Intel用术语&lt;code&gt;字&lt;/code&gt;来表示16位数据类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GCC&lt;/code&gt;生成&lt;code&gt;x86&lt;/code&gt;的汇编代码指令都有一个操作数大小的字符后缀&lt;code&gt;b&lt;/code&gt;、&lt;code&gt;w&lt;/code&gt;、&lt;code&gt;l&lt;/code&gt;、&lt;code&gt;q&lt;/code&gt;，如：&lt;code&gt;movq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;区分&lt;code&gt;x86&lt;/code&gt;不同大小的寄存器，前缀为&lt;code&gt;r&lt;/code&gt;的寄存器的大小为&lt;strong&gt;四字&lt;/strong&gt;，前缀为&lt;code&gt;e&lt;/code&gt;的大小为&lt;strong&gt;双字&lt;/strong&gt;，后缀为&lt;code&gt;l&lt;/code&gt;或者&lt;code&gt;b&lt;/code&gt;寄存器的大小为&lt;strong&gt;字节&lt;/strong&gt;，其余的归为大小为&lt;strong&gt;字&lt;/strong&gt;的寄存器 &lt;img src=&quot;/2022/05/19/CSAPP-Ch3/img-2022-05-19-13-49-56.png&quot;&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x86&lt;/code&gt;的操作数格式，其中比例因子必须是1、2、4、8 &lt;img src=&quot;/2022/05/19/CSAPP-Ch3/img-2022-05-19-13-51-36.png&quot;&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x86&lt;/code&gt;规定&lt;strong&gt;立即数大小不能超过32位&lt;/strong&gt;; 且任何为寄存器生成32位值的指令都会把该寄存器的高位部分置为0，如：&lt;code&gt;movl $256, %eax&lt;/code&gt;，会把&lt;code&gt;rax&lt;/code&gt;寄存器的高32位置0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;movq&lt;/code&gt;会将32位的&lt;code&gt;立即数&lt;/code&gt;拓展为64位再进行传送，而&lt;code&gt;movabsq&lt;/code&gt;直接使用64位的立即数作为源操作数使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mov&lt;/code&gt;的常规4条指令只能表示&lt;strong&gt;32位&lt;/strong&gt;补码数字的&lt;code&gt;立即数&lt;/code&gt;作为&lt;code&gt;源操作数&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x86-64&lt;/code&gt;的内存引用总是用&lt;code&gt;4字长&lt;/code&gt;的寄存器(因为地址空间大小为64位)，如：&lt;code&gt;movw %dx, (%rax)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;强制转换&lt;/code&gt;先考虑大小，在考虑符号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pushq&lt;/code&gt;等价为&lt;code&gt;subq&lt;/code&gt;加上&lt;code&gt;movq&lt;/code&gt;两条指令的操作，&lt;code&gt;popq&lt;/code&gt;同理，操作的数据大小为&lt;strong&gt;四字&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x86&lt;/code&gt;的二元&lt;code&gt;算术&lt;/code&gt;和&lt;code&gt;逻辑&lt;/code&gt;操作的第二个操作数即是&lt;code&gt;源&lt;/code&gt;也是&lt;code&gt;目的&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;= =未完待续。。。&lt;/p&gt;
</summary>
    
    
    
    <category term="读书笔记" scheme="https://mitmoksha.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>书籍推荐</title>
    <link href="https://mitmoksha.github.io/2022/05/18/Recommended_books/"/>
    <id>https://mitmoksha.github.io/2022/05/18/Recommended_books/</id>
    <published>2022-05-18T15:37:49.000Z</published>
    <updated>2022-05-19T05:36:56.455Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;一些好书推荐(强烈建议)，可以按照大类先后阅读。以下的书我绝大多数都看过，希望能在接下来有限的时间里都阅读完吧&lt;/p&gt;&lt;/blockquote&gt;</summary>
    
    
    
    <category term="读书笔记" scheme="https://mitmoksha.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>CSAPP Ch2</title>
    <link href="https://mitmoksha.github.io/2022/05/18/CSAPP-Ch2/"/>
    <id>https://mitmoksha.github.io/2022/05/18/CSAPP-Ch2/</id>
    <published>2022-05-18T10:11:57.000Z</published>
    <updated>2022-05-18T14:32:50.167Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;第二章后面部分Yale patt讲的比较清楚，因此在读第二遍的时候就没有继续总结了&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="读书笔记" scheme="https://mitmoksha.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>CSAPP Ch1</title>
    <link href="https://mitmoksha.github.io/2022/05/18/CSAPP-Ch1/"/>
    <id>https://mitmoksha.github.io/2022/05/18/CSAPP-Ch1/</id>
    <published>2022-05-18T03:14:00.000Z</published>
    <updated>2022-05-19T05:21:48.592Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;计算机系统总是如此的吸引人&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="读书笔记" scheme="https://mitmoksha.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Letex Note</title>
    <link href="https://mitmoksha.github.io/2022/05/18/Letex-Note/"/>
    <id>https://mitmoksha.github.io/2022/05/18/Letex-Note/</id>
    <published>2022-05-18T02:53:09.000Z</published>
    <updated>2022-05-18T09:58:00.812Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;以下记录一些本人常用的公式, 因为deploy之后对部分公式支持较差，因此有部分删减&lt;/p&gt;&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Computer Science Notes" scheme="https://mitmoksha.github.io/categories/Computer-Science-Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>CS61B Lec Note</title>
    <link href="https://mitmoksha.github.io/2022/05/18/CS61B-Lec-Note/"/>
    <id>https://mitmoksha.github.io/2022/05/18/CS61B-Lec-Note/</id>
    <published>2022-05-18T02:52:23.000Z</published>
    <updated>2022-05-18T09:57:19.750Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Data Structure in Java&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="CS61B" scheme="https://mitmoksha.github.io/categories/CS61B/"/>
    
    
  </entry>
  
  <entry>
    <title>CS61C C Note</title>
    <link href="https://mitmoksha.github.io/2022/05/18/CS61C-C-Note/"/>
    <id>https://mitmoksha.github.io/2022/05/18/CS61C-C-Note/</id>
    <published>2022-05-18T02:08:33.000Z</published>
    <updated>2022-05-18T09:57:24.205Z</updated>
    
    
    <summary type="html">&lt;!-- # CS61C C Part Notes. --&gt;
&lt;blockquote&gt;
&lt;p&gt;揭示C语言的本质&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="CS61C" scheme="https://mitmoksha.github.io/categories/CS61C/"/>
    
    
  </entry>
  
  <entry>
    <title>NJU OS Note</title>
    <link href="https://mitmoksha.github.io/2022/05/16/NJU-OS-Note/"/>
    <id>https://mitmoksha.github.io/2022/05/16/NJU-OS-Note/</id>
    <published>2022-05-16T10:14:19.000Z</published>
    <updated>2022-05-18T09:58:21.744Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;一直以来被忽略的本科教学&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Computer Science Notes" scheme="https://mitmoksha.github.io/categories/Computer-Science-Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>ICS Lab Note</title>
    <link href="https://mitmoksha.github.io/2022/05/16/ICS-Lab-Note/"/>
    <id>https://mitmoksha.github.io/2022/05/16/ICS-Lab-Note/</id>
    <published>2022-05-16T10:08:09.000Z</published>
    <updated>2022-05-18T09:57:52.517Z</updated>
    
    
    <summary type="html">&lt;!-- # ICS Lab Note --&gt;
&lt;blockquote&gt;
&lt;p&gt;本校的Lab体验总结&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Computer Science Notes" scheme="https://mitmoksha.github.io/categories/Computer-Science-Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>CS186 Note</title>
    <link href="https://mitmoksha.github.io/2022/05/16/CS186-Note/"/>
    <id>https://mitmoksha.github.io/2022/05/16/CS186-Note/</id>
    <published>2022-05-16T10:07:44.000Z</published>
    <updated>2022-05-18T09:57:42.510Z</updated>
    
    
    <summary type="html">&lt;!-- # **CS186 Note** --&gt;
&lt;blockquote&gt;
&lt;p&gt;SQL真的这么难吗?&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Computer Science Notes" scheme="https://mitmoksha.github.io/categories/Computer-Science-Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>CMU 15-445 Project1: BUFFER POOL MANAGER</title>
    <link href="https://mitmoksha.github.io/2022/05/16/cmu15445-project1/"/>
    <id>https://mitmoksha.github.io/2022/05/16/cmu15445-project1/</id>
    <published>2022-05-16T10:02:20.000Z</published>
    <updated>2022-05-18T09:56:29.589Z</updated>
    
    
    <summary type="html">&lt;!-- # CMU 15-445 Project1: BUFFER POOL MANAGER --&gt;
&lt;blockquote&gt;
&lt;p&gt;OS vs. DB&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="CMU15-445" scheme="https://mitmoksha.github.io/categories/CMU15-445/"/>
    
    
  </entry>
  
  <entry>
    <title>CS61C Lab2</title>
    <link href="https://mitmoksha.github.io/2022/05/16/cs61c-lab2/"/>
    <id>https://mitmoksha.github.io/2022/05/16/cs61c-lab2/</id>
    <published>2022-05-16T09:59:00.000Z</published>
    <updated>2022-05-18T09:57:31.792Z</updated>
    
    
    <summary type="html">&lt;!-- # CS61C Lab2 --&gt;
&lt;blockquote&gt;
&lt;p&gt;覆盖广的一个lab&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="CS61C" scheme="https://mitmoksha.github.io/categories/CS61C/"/>
    
    
  </entry>
  
  <entry>
    <title>Stanford CS144 Lab0: Networking Warmup</title>
    <link href="https://mitmoksha.github.io/2022/05/16/cs144-lab0/"/>
    <id>https://mitmoksha.github.io/2022/05/16/cs144-lab0/</id>
    <published>2022-05-16T09:58:51.000Z</published>
    <updated>2022-05-18T09:57:39.734Z</updated>
    
    
    <summary type="html">&lt;!-- # Stanford CS144 Lab0: Networking Warmup --&gt;
&lt;blockquote&gt;
&lt;p&gt;应用层Overview&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="CS144" scheme="https://mitmoksha.github.io/categories/CS144/"/>
    
    
  </entry>
  
  <entry>
    <title>MIT 6.S081 Lab5: xv6 lazy page allocation</title>
    <link href="https://mitmoksha.github.io/2022/05/16/s081-lab5/"/>
    <id>https://mitmoksha.github.io/2022/05/16/s081-lab5/</id>
    <published>2022-05-16T09:55:02.000Z</published>
    <updated>2022-05-18T09:51:07.336Z</updated>
    
    
    <summary type="html">&lt;!-- # MIT 6.S081 Lab5: xv6 lazy page allocation --&gt;
&lt;p&gt;很多情况都用到了Lazy allocation, 比如: - paging from disk - COW fork - automatically extending stack - memory-mapped files&lt;/p&gt;</summary>
    
    
    
    <category term="MIT 6.S081" scheme="https://mitmoksha.github.io/categories/MIT-6-S081/"/>
    
    
  </entry>
  
  <entry>
    <title>MIT 6.S081 Lab4: Traps</title>
    <link href="https://mitmoksha.github.io/2022/05/16/s081-lab4/"/>
    <id>https://mitmoksha.github.io/2022/05/16/s081-lab4/</id>
    <published>2022-05-16T09:54:57.000Z</published>
    <updated>2022-05-18T09:41:02.965Z</updated>
    
    
    <summary type="html">&lt;!-- # MIT 6.S081 Lab4: Traps --&gt;
&lt;ul&gt;
&lt;li&gt;跟着视频走一遍系统调用&lt;code&gt;gdb&lt;/code&gt;的流程。&lt;code&gt;tmux&lt;/code&gt;分割两个窗口，一个窗口作为服务器&lt;code&gt;make CPUS=1 qemu-gdb&lt;/code&gt;，另一个窗口作为&lt;code&gt;gdb&lt;/code&gt;调试窗口&lt;code&gt;gdb-multiarch&lt;/code&gt;。将断点打在&lt;code&gt;ecall指令处&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt;执行，随后再将第二个断点打到&lt;code&gt;print/x $stvec&lt;/code&gt;处也就是，&lt;code&gt;TRAPFRAME&lt;/code&gt;的起始地址。&lt;code&gt;ecall&lt;/code&gt;指令完成三件事，将用户模式切换到管理员模式、将PC保存到sepc寄存器中、将stvec寄存器的值赋给PC跳转到stvec保存的地址处执行。&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="MIT 6.S081" scheme="https://mitmoksha.github.io/categories/MIT-6-S081/"/>
    
    
  </entry>
  
  <entry>
    <title>MIT 6.S081 Lab3: Page tables</title>
    <link href="https://mitmoksha.github.io/2022/05/16/s081-lab3/"/>
    <id>https://mitmoksha.github.io/2022/05/16/s081-lab3/</id>
    <published>2022-05-16T09:54:53.000Z</published>
    <updated>2022-05-18T09:40:53.323Z</updated>
    
    
    <summary type="html">&lt;!-- # MIT 6.S081 Lab3: Page tables --&gt;
&lt;h2 id=&quot;print-a-page-table&quot;&gt;&lt;strong&gt;1. Print a page table&lt;/strong&gt;&lt;/h2&gt;</summary>
    
    
    
    <category term="MIT 6.S081" scheme="https://mitmoksha.github.io/categories/MIT-6-S081/"/>
    
    
  </entry>
  
  <entry>
    <title>MIT 6.S081 Lab2: System Calls</title>
    <link href="https://mitmoksha.github.io/2022/05/16/s081-lab2/"/>
    <id>https://mitmoksha.github.io/2022/05/16/s081-lab2/</id>
    <published>2022-05-16T09:54:49.000Z</published>
    <updated>2022-05-18T09:40:48.601Z</updated>
    
    
    <summary type="html">&lt;!-- # MIT 6.S081 Lab2: System Calls --&gt;
&lt;h2 id=&quot;system-call-tracing&quot;&gt;&lt;strong&gt;1. System call tracing&lt;/strong&gt;&lt;/h2&gt;</summary>
    
    
    
    <category term="MIT 6.S081" scheme="https://mitmoksha.github.io/categories/MIT-6-S081/"/>
    
    
  </entry>
  
  <entry>
    <title>MIT 6.S081 Lab1: Xv6 and Unix utilities</title>
    <link href="https://mitmoksha.github.io/2022/05/16/s081-lab1/"/>
    <id>https://mitmoksha.github.io/2022/05/16/s081-lab1/</id>
    <published>2022-05-16T09:53:02.000Z</published>
    <updated>2022-05-18T09:58:54.332Z</updated>
    
    
    <summary type="html">&lt;!-- # MIT 6.S081 Lab1: Xv6 and Unix utilities --&gt;
&lt;h2 id=&quot;sleep&quot;&gt;&lt;strong&gt;1. sleep&lt;/strong&gt;&lt;/h2&gt;</summary>
    
    
    
    <category term="MIT 6.S081" scheme="https://mitmoksha.github.io/categories/MIT-6-S081/"/>
    
    
  </entry>
  
  <entry>
    <title>CS61B GITLET PROJECT</title>
    <link href="https://mitmoksha.github.io/2022/05/16/CS61B-GITLET-PROJECT/"/>
    <id>https://mitmoksha.github.io/2022/05/16/CS61B-GITLET-PROJECT/</id>
    <published>2022-05-16T09:39:52.000Z</published>
    <updated>2022-05-18T09:56:49.018Z</updated>
    
    
    <summary type="html">&lt;!-- # CS61B Gitlet --&gt;
&lt;blockquote&gt;
&lt;p&gt;简化版Git，深入探索Git的底层结构&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="CS61B" scheme="https://mitmoksha.github.io/categories/CS61B/"/>
    
    
  </entry>
  
  <entry>
    <title>CS61C CPU PROJECT</title>
    <link href="https://mitmoksha.github.io/2022/05/16/CS61C-CPU-PROJECT/"/>
    <id>https://mitmoksha.github.io/2022/05/16/CS61C-CPU-PROJECT/</id>
    <published>2022-05-16T09:37:37.000Z</published>
    <updated>2022-05-18T09:57:27.796Z</updated>
    
    
    <summary type="html">&lt;!-- # **CS61C CPU PROJECT** --&gt;
&lt;blockquote&gt;
&lt;p&gt;用时4天，体验CPU设计&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="CS61C" scheme="https://mitmoksha.github.io/categories/CS61C/"/>
    
    
  </entry>
  
</feed>
